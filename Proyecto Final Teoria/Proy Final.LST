CCS PCM C Compiler, Version 3.184, 22094

               Filename: D:\Microcomputadoras\Proyecto Final Teoria\Proy Final.LST

               ROM used: 2802 (34%)
                         Largest free fragment is 2048
               RAM used: 39 (22%) at main() level
                         173 (99%) worst case
               Stack:    3 worst case (2 in main + 1 for interrupts)

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   013
0003:  NOP
....................  #include <16f877.h> 
....................  //////// Standard Header file for the PIC16F877 device ////////////////  
.................... #device PIC16F877  
.................... #list  
....................  
.................... #include<string.h> 
....................  ////////////////////////////////////////////////////////////////////////////  
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            ////  
.................... //// This source code may only be used by licensed users of the CCS C   ////  
.................... //// compiler.  This source code may only be distributed to other       ////  
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////  
.................... //// or distribution is permitted without written permission.           ////  
.................... //// Derivative programs created using this software in object code     ////  
.................... //// form are not restricted in any way.                                ////  
.................... ////////////////////////////////////////////////////////////////////////////  
....................   
.................... #ifndef _STRING  
.................... #define _STRING  
.................... #include <stddef.h> 
....................  ///////////////////////////////////////////////////////////////////////////  
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           ////  
.................... //// This source code may only be used by licensed users of the CCS C  ////  
.................... //// compiler.  This source code may only be distributed to other      ////  
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////  
.................... //// or distribution is permitted without written permission.          ////  
.................... //// Derivative programs created using this software in object code    ////  
.................... //// form are not restricted in any way.                               ////  
.................... ///////////////////////////////////////////////////////////////////////////  
....................   
.................... #ifndef _STDDEF  
....................   
.................... #define _STDDEF  
....................   
.................... #if sizeof(int *)==1  
.................... #define ptrdiff_t int  
.................... #else  
.................... #define ptrdiff_t long  
.................... #endif  
....................   
.................... #define size_t int  
.................... #define wchar_t char  
.................... #define NULL 0  
....................   
.................... #define offsetof(s,f) (offsetofbit(s,f)/8)  
....................   
.................... #endif  
....................  
.................... #include <ctype.h> 
....................  ////////////////////////////////////////////////////////////////////////////  
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            ////  
.................... //// This source code may only be used by licensed users of the CCS C   ////  
.................... //// compiler.  This source code may only be distributed to other       ////  
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////  
.................... //// or distribution is permitted without written permission.           ////  
.................... //// Derivative programs created using this software in object code     ////  
.................... //// form are not restricted in any way.                                ////  
.................... ////////////////////////////////////////////////////////////////////////////  
....................   
.................... #ifndef _CTYPE  
.................... #define _CTYPE  
....................   
.................... #define islower(x)  isamoung(x,"abcdefghijklmnopqrstuvwxyz")  
.................... #define isupper(x)  isamoung(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")  
.................... #define isalnum(x)  isamoung(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")  
.................... #define isalpha(x)  isamoung(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")  
.................... #define isdigit(x)  isamoung(x,"0123456789")  
.................... #define isspace(x)  (x==' ')  
.................... #define isxdigit(x) isamoung(x,"0123456789ABCDEFabcdef")  
.................... #define iscntrl(x)  (x<' ')  
.................... #define isprint(x)  (x>=' ')  
.................... #define isgraph(x)  (x>' ')  
.................... #define ispunct(x)  ((x>' ')&&!isalnum(x))  
....................   
.................... #endif  
....................   
....................  
....................   
....................   
....................   
.................... //////////////////////////////////////////////  
.................... //// Uncomment the following define to    ////  
.................... //// allow some functions to use a        ////  
.................... //// quicker algorithm, but use more ROM  ////  
.................... ////                                      ////  
.................... //// #define FASTER_BUT_MORE_ROM          ////  
.................... //////////////////////////////////////////////  
....................   
....................   
....................   
.................... /*Copying functions*/  
.................... /* standard template:  
....................    void *memmove(void *s1, void *s2, size_t n).  
....................    Copies max of n characters safely (not following ending '\0')  
....................    from s2 in s1; if s2 has less than n characters, appends 0 */  
....................   
.................... char *memmove(void *s1,char *s2,size_t n)  
.................... {  
....................    char *sc1;  
....................    char *sc2;  
....................    sc1=s1;  
....................    sc2=s2;  
....................    if(sc2<sc1 && sc1 <sc2 +n)  
....................       for(sc1+=n,sc2+=n;0<n;--n)  
....................          *--sc1=*--sc2;  
....................    else  
....................       for(;0<n;--n)  
....................          *sc1++=*sc2++;  
....................   return s1;  
....................   }  
.................... /*    Standard template: char *strcpy(char *s1, const char *s2)  
.................... copies the string s2 including the null character to s1*/  
....................   
.................... char *strcpy(char *s1, char *s2)  
.................... {  
....................   char *s;  
....................   
....................   for (s = s1; *s2 != 0; s++, s2++)  
.................... 	  *s = *s2;  
....................   return(s1);  
.................... }  
.................... /* compiler ignored the name 'strcpy()'; perhaps, it's reserved?? 
....................    Standard template: char *strcpy(char *s1, const char *s2)  
....................    copies the string s2 including the null character to s1*/  
....................   
.................... char *strcopy(char *s1, char *s2)  
.................... {  
....................   char *s;  
....................   
....................   for (s = s1; *s2 != 0; s++, s2++)  
.................... 	  *s = *s2;  
....................   return(s1);  
.................... }  
....................   
.................... /* standard template:  
....................    char *strncpy(char *s1, const char *s2, size_t n).  
....................    Copies max of n characters (not following ending '\0')  
....................    from s2 in s1; if s2 has less than n characters, appends 0 */  
....................   
.................... char *strncpy(char *s1, char *s2, size_t n)  
.................... {  
....................   char *s;  
....................   
....................   for (s = s1; n > 0 && *s2 != '\0'; n--)  
....................      *s++ = *s2++;  
....................   for (; n > 0; n--)  
....................      *s++ = '\0';  
....................   
....................   return(s1);  
.................... }  
.................... /***********************************************************/  
....................   
.................... /*concatenation functions*/  
.................... /* standard template: char *strcat(char *s1, const char *s2)  
.................... appends s2 to s1*/  
....................   
.................... char *strcat(char *s1, char *s2)  
.................... {  
....................    char *s;  
....................   
....................    for (s = s1; *s != '\0'; ++s);  
....................    while(*s2 != '\0')  
....................    {  
....................       *s = *s2;  
....................       ++s;  
....................       ++s2;  
....................    }  
....................   
....................    *s = '\0';  
....................    return(s1);  
.................... }  
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n)  
.................... appends not more than n characters from s2 to s1*/  
....................   
.................... char *strncat(char *s1, char *s2, size_t n)  
.................... {  
....................    char *s;  
....................   
....................    for (s = s1; *s != '\0'; ++s);  
....................    while(*s2 != '\0' && 0<n)  
....................    {  
....................       *s = *s2;  
....................       ++s;  
....................       ++s2;  
....................       --n;  
....................    }  
....................   
....................    *s = '\0';  
....................    return(s1);  
.................... }  
....................   
.................... /***********************************************************/  
....................   
.................... /*comparison functions*/  
.................... /* standard template: signed int memcmp(void *s1, void *s2).  
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */  
....................   
.................... signed int memcmp(void * s1,char *s2,size_t n)  
.................... {  
.................... char *su1, su2;  
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n)  
.................... {  
....................    if(*su1!=*su2)  
....................       return ((*su1<*su2)??1:+1);  
.................... }  
.................... return 0;  
.................... }  
.................... /* standard template: int strcmp(const char *s1, const char *s2).  
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */  
....................   
.................... signed int strcmp(char *s1, char *s2)  
.................... {  
....................    for (; *s1 == *s2; s1++, s2++)  
*
0059:  BSF    03.5
005A:  MOVF   6A,W
005B:  MOVWF  04
005C:  MOVF   00,W
005D:  MOVWF  6C
005E:  MOVF   6B,W
005F:  MOVWF  04
0060:  MOVF   00,W
0061:  SUBWF  6C,W
0062:  BTFSS  03.2
0063:  GOTO   072
....................       if (*s1 == '\0')  
....................          return(0);  
0064:  MOVF   6A,W
0065:  MOVWF  04
0066:  MOVF   00,F
0067:  BTFSS  03.2
0068:  GOTO   06C
0069:  MOVLW  00
006A:  MOVWF  78
006B:  GOTO   080
006C:  MOVF   6A,W
006D:  INCF   6A,F
006E:  INCF   6B,F
006F:  BCF    03.5
0070:  GOTO   059
0071:  BSF    03.5
....................    return((*s1 < *s2) ??-1: 1);  
0072:  MOVF   6A,W
0073:  MOVWF  04
0074:  MOVF   00,W
0075:  MOVWF  6C
0076:  MOVF   6B,W
0077:  MOVWF  04
0078:  MOVF   00,W
0079:  SUBWF  6C,W
007A:  BTFSC  03.0
007B:  GOTO   07E
007C:  MOVLW  FF
007D:  GOTO   07F
007E:  MOVLW  01
007F:  MOVWF  78
.................... }  
0080:  BCF    03.5
0081:  RETLW  00
.................... /* standard template: int strcoll(const char *s1, const char *s2).  
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */  
....................   
.................... signed int strcoll(char *s1, char *s2)  
.................... {  
....................    for (; *s1 == *s2; s1++, s2++)  
....................       if (*s1 == '\0')  
....................          return(0);  
....................    return((*s1 < *s2) ??-1: 1);  
.................... }  
....................   
.................... /* standard template:  
....................    int strncmp(const char *s1, const char *s2, size_t n).  
....................    Compares max of n characters (not following 0) from s1 to s2;  
....................    returns same as strcmp */  
....................   
.................... signed int strncmp(char *s1, char *s2, size_t n)  
.................... {  
....................    for (; n > 0; s1++, s2++, n--)  
....................       if (*s1 != *s2)  
....................          return((*s1 <*s2) ??-1: 1);  
....................       else if (*s1 == '\0')  
....................          return(0);  
....................    return(0);  
.................... }  
.................... /* standard template:  
....................    int strxfrm(const char *s1, const char *s2, size_t n).  
....................    transforms maximum of n characters from s2 and places them into s1*/  
.................... size_t strxfrm(char *s1, char *s2, size_t n)  
.................... {  
....................   char *s;  
....................   int n1;  
....................   n1=n;  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--)  
....................      *s++ = *s2++;  
....................   for (; n > 0; n--)  
....................      *s++ = '\0';  
....................   
....................   return(n1);  
.................... }  
....................   
....................   
....................   
....................   
....................   
.................... /***********************************************************/  
.................... /*Search functions*/  
.................... /* standard template: void *memchr(const char *s, int c).  
....................    Finds first occurrence of c in n characters of s */  
....................   
.................... char *memchr(void *s,int c,size_t n)  
.................... {  
....................    char uc;  
....................    char *su;  
....................    uc=c;  
....................    for(su=s;0<n;++su,--n)  
....................       if(*su==uc)  
....................       return su;  
....................    return NULL;  
.................... }  
....................   
.................... /* standard template: char *strchr(const char *s, int c).  
....................    Finds first occurrence of c in s */  
....................   
.................... char *strchr(char *s, int c)  
.................... {  
....................    for (; *s != c; s++)  
....................       if (*s == '\0')  
....................          return(0);  
....................    return(s);  
.................... }  
.................... /* standard template:  
....................    size_t strcspn(const char *s1, const char *s2).  
....................    Computes length of max initial segment of s1 that  
....................    consists entirely of characters NOT from s2*/  
....................   
.................... int *strcspn(char *s1, char *s2)  
.................... {  
....................    char *sc1, *sc2;  
....................   
....................    for (sc1 = s1; *sc1 != 0; sc1++)  
....................       for (sc2 = s2; *sc2 != 0; sc2++)  
....................          if (*sc1 == *sc2)  
....................             return(sc1 - s1);  
....................    return(sc1 - s1);  
.................... }  
.................... /* standard template:  
....................    char *strpbrk(const char *s1, const char *s2).  
....................    Locates first occurence of any character from s2 in s1;  
....................    returns s1 if s2 is empty string */  
....................   
.................... char *strpbrk(char *s1, char *s2)  
.................... {  
....................    char *sc1, *sc2;  
....................   
....................    for (sc1 = s1; *sc1 != 0; sc1++)  
....................       for (sc2 = s2; *sc2 != 0; sc2++)  
....................          if (*sc1 == *sc2)  
....................             return(sc1);  
....................    return(0);  
.................... }  
....................   
....................   
.................... /* standard template: char *strrchr(const char *s, int c).  
....................    Finds last occurrence of c in s */  
....................   
.................... char *strrchr(char *s, int c)  
.................... {  
....................    char *p;  
....................   
....................    for (p = 0; ; s++)  
....................    {  
....................       if (*s == c)  
....................          p = s;  
....................       if (*s == '\0')  
....................          return(p);  
....................    }  
.................... }  
.................... /* computes length of max initial segment of s1 consisting  
....................    entirely of characters from s2 */  
....................   
.................... int *strspn(char *s1, char *s2)  
.................... {  
....................    char *sc1, *sc2;  
....................   
....................    for (sc1 = s1; *sc1 != 0; sc1++)  
....................       for (sc2 = s2; ; sc2++)  
.................... 	 if (*sc2 == '\0')  
.................... 	    return(sc1 - s1);  
....................          else if (*sc1 == *sc2)  
....................             break;  
....................    return(sc1 - s1);  
.................... }  
.................... /* standard template:  
....................    char *strstr(const char *s1, const char *s2);  
....................    Locates first occurence of character sequence s2 in s1;  
....................    returns 0 if s2 is empty string  
....................   
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the  
....................    file to use the faster algorithm */  
.................... char *strstr(char *s1, char *s2)  
.................... {  
.................... 	char *s, *t;  
....................   
....................    #ifdef FASTER_BUT_MORE_ROM  
....................    if (*s2 == '\0')  
....................          return(s1);  
....................    #endif  
....................   
.................... 	while (*s1)  
....................    {  
....................       for(s = s1, t = s2; *t && *s == *t; ++s, ++t);  
....................   
.................... 		if (*t == '\0')  
.................... 			return s1;  
....................       ++s1;  
....................       #ifdef FASTER_BUT_MORE_ROM  
....................          while(*s1 != '\0' && *s1 != *s2)  
....................             ++s1;  
....................       #endif  
.................... 	}  
.................... 	return 0;  
.................... }  
....................   
.................... /* standard template: char *strtok(char *s1, const char *s2).  
....................   
....................    Finds next token in s1 delimited by a character from separator  
....................    string s2 (which can be different from call to call).  First call  
....................    starts at beginning of s1 searching for first character NOT  
....................    contained in s2; returns 0 if none is found.  
....................    If one is found, it is the start of first token (return value).  
....................    Function then searches from there for a character contained in s2.  
....................    If none is found, current token extends to end of s1, and subsequent  
....................    searches for a token will return 0.  If one is found, it is  
....................    overwritten by '\0', which terminates current token.  Function saves  
....................    pointer to following character from which next search will start.  
....................    Each subsequent call, with 0 as first argument, starts searching  
....................    from saved pointer */  
....................   
.................... char *strtok(char *s1, char *s2)  
.................... {  
....................    char *beg, *end;  
....................    static char *save;  
*
0819:  BCF    03.5
081A:  CLRF   20
081B:  MOVLW  81
081C:  BSF    03.5
081D:  MOVWF  19
081E:  MOVLW  26
081F:  MOVWF  18
0820:  MOVLW  90
0821:  BCF    03.5
0822:  MOVWF  18
....................   
....................    beg = (s1)??s1: save;  
....................    beg += strspn(beg, s2);  
....................    if (*beg == '\0')  
....................    {  
....................       *save = ' ';  
....................       return(0);  
....................    }  
....................    end = strpbrk(beg, s2);  
....................    if (*end != '\0')  
....................    {  
....................       *end = '\0';  
....................       end++;  
....................    }  
....................    save = end;  
....................    return(beg);  
.................... }  
....................   
.................... /*****************************************************************/  
.................... /*Miscellaneous functions*/  
.................... /* standard template  
.................... maps error number in errnum to an error message string  
.................... Returns: Pointer to string  
.................... */  
.................... #ifdef _ERRNO  
.................... char * strerror(int errnum)  
.................... {  
.................... char s[15];  
.................... switch( errnum)  
.................... {  
.................... case 0:  
....................    strcpy(s,"no errors");  
....................    return s;  
.................... case EDOM :  
....................    strcpy(s,"domain error");  
....................    return s;  
.................... case ERANGE:  
....................    strcpy(s,"range error");  
....................    return s;  
.................... }  
.................... }  
.................... #ENDIF  
.................... /* standard template: size_t strlen(const char *s).  
....................    Computes length of s1 (preceding terminating 0) */  
....................   
.................... int *strlen(char *s)  
.................... {  
....................    char *sc;  
....................   
....................    for (sc = s; *sc != 0; sc++);  
....................    return(sc - s);  
.................... }  
....................   
.................... /* standard template: size_t stricmp(const char *s1, const char *s2).  
....................    Compares s1 to s2 ignoring case (upper vs. lower) */  
....................   
.................... signed int stricmp(char *s1, char *s2)  
.................... {  
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32));  
....................     s1++, s2++)  
....................     if (*s1 == '\0')  
....................        return(0);  
....................  return((*s1 < *s2) ??-1: 1);  
.................... }  
....................   
....................   
.................... /* standard template: char *strlwr(char *s).  
....................    Replaces uppercase letters by lowercase;  
....................    returns pointer to new string s */  
....................   
.................... char *strlwr(char *s)  
.................... {  
....................    char *p;  
....................   
....................    for (p = s; *p != '\0'; p++)  
....................       if (*p >= 'A' && *p <='Z')  
....................          *p += 'a' - 'A';  
....................    return(s);  
.................... }  
....................   
....................   
.................... /************************************************************/  
....................   
....................   
.................... #endif  
....................  
.................... #fuses HS,NOPROTECT,  
.................... #use delay(clock=20000000)  
*
0004:  MOVLW  42
0005:  MOVWF  04
0006:  MOVF   00,W
0007:  BTFSC  03.2
0008:  GOTO   016
0009:  MOVLW  06
000A:  MOVWF  78
000B:  CLRF   77
000C:  DECFSZ 77,F
000D:  GOTO   00C
000E:  DECFSZ 78,F
000F:  GOTO   00B
0010:  MOVLW  7B
0011:  MOVWF  77
0012:  DECFSZ 77,F
0013:  GOTO   012
0014:  DECFSZ 00,F
0015:  GOTO   009
0016:  RETLW  00
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7)  
.................... #org 0x1F00, 0x1FFF void loader16F877(void) {}  
*
1F00:  RETLW  00
....................   
.................... #byte    PORTB =  0x06  
.................... #byte    PORTE =  0x09  
.................... #byte    PORTD =  0x08  
.................... #byte    TRISB =  0x86  
.................... #byte    TRISD =  0x88  
....................   
.................... #define  RS       2  
.................... #define  RW       1  
.................... #define  E        0  
....................   
.................... int i=0, cont=0;  
*
0823:  CLRF   21
0824:  CLRF   22
.................... int DATA11[11], DATA;  
.................... char cadena[]={"                "};  
0825:  MOVLW  20
0826:  MOVWF  2F
0827:  MOVWF  30
0828:  MOVWF  31
0829:  MOVWF  32
082A:  MOVWF  33
082B:  MOVWF  34
082C:  MOVWF  35
082D:  MOVWF  36
082E:  MOVWF  37
082F:  MOVWF  38
0830:  MOVWF  39
0831:  MOVWF  3A
0832:  MOVWF  3B
0833:  MOVWF  3C
0834:  MOVWF  3D
0835:  MOVWF  3E
0836:  CLRF   3F
.................... // Declaracion de funciones globales  
.................... void fncEscribe(char);  
.................... void fncRecibeC(char car);  
.................... void fnComparaC(char cadena[]);  
.................... void fnLimpCad();  
.................... void fncClear();  
.................... void fncCadena(char caracter[]);  
.................... void RecorDispDer();  
....................   
.................... void main(){  
.................... //******************************* RUTINA DE INICIALIZACION LCD *******************************//  
*
0813:  CLRF   04
0814:  MOVLW  1F
0815:  ANDWF  03,F
0816:  MOVLW  06
0817:  BSF    03.5
0818:  MOVWF  1F
....................   // Puerto B como salida  
....................   set_tris_b(0x00);  
*
0837:  MOVLW  00
0838:  BSF    03.5
0839:  MOVWF  06
....................   // Puerto E como salida  
....................   set_tris_e(0x00);  
083A:  BCF    09.0
083B:  BCF    09.1
083C:  BCF    09.2
....................   // int i=8;  
....................   
....................   // Bits 0 y 1 del puerto D como entrada  
....................   bit_set(TRISD,0);  
083D:  BSF    08.0
....................   bit_set(TRISD,1);  
083E:  BSF    08.1
....................   // Puerto B como salida  
....................   set_tris_b(0x00);  
083F:  MOVWF  06
....................   
....................   // Redardo para que todo se estabilice  
....................   delay_ms(1000);  
0840:  MOVLW  04
0841:  BCF    03.5
0842:  MOVWF  41
0843:  MOVLW  FA
0844:  MOVWF  42
0845:  BCF    0A.3
0846:  CALL   004
0847:  BSF    0A.3
0848:  DECFSZ 41,F
0849:  GOTO   043
....................   // Condicion Inicial  
....................   // Todos los puertos en 0  
....................   output_b(0x00);  
084A:  MOVLW  00
084B:  BSF    03.5
084C:  MOVWF  06
084D:  BCF    03.5
084E:  CLRF   06
....................   output_e(0x00);  
084F:  BSF    03.5
0850:  MOVWF  09
0851:  BCF    03.5
0852:  CLRF   09
....................   
....................   //------------------------------------//  
....................   // Rutina de Inicializacion de la LCD //  
....................   //------------------------------------//  
....................   
....................   //1. Retardo de 16ms para que todos  
....................   //   los voltajes se estabilizen.  
....................   
....................   delay_ms(16);        // Retardo de 16ms  
0853:  MOVLW  10
0854:  MOVWF  42
0855:  BCF    0A.3
0856:  CALL   004
0857:  BSF    0A.3
....................   
....................   //2.  
....................   
....................   // Nota: Siempre que se manda un comando  
....................   // la terminal de control debe ser puesta a 1 (E=1)  
....................   // y luego rehresada a cero (E=0)  
....................   
....................   bit_set(PORTE,E);    // E=1  
0858:  BSF    09.0
....................   output_b(0x30);      // PORTB = 30H  
0859:  MOVLW  00
085A:  BSF    03.5
085B:  MOVWF  06
085C:  MOVLW  30
085D:  BCF    03.5
085E:  MOVWF  06
....................   bit_clear(PORTE,E);  // E=0  
085F:  BCF    09.0
....................   
....................   //3.  
....................   delay_ms(5);         // Retardo de 5ms  
0860:  MOVLW  05
0861:  MOVWF  42
0862:  BCF    0A.3
0863:  CALL   004
0864:  BSF    0A.3
....................   
....................   //4.  
....................   bit_set(PORTE,E);    // E=1  
0865:  BSF    09.0
....................   output_b(0x30);      // PORTB = 30H  
0866:  MOVLW  00
0867:  BSF    03.5
0868:  MOVWF  06
0869:  MOVLW  30
086A:  BCF    03.5
086B:  MOVWF  06
....................   bit_clear(PORTE,E);  // E=0  
086C:  BCF    09.0
....................   
....................   //5.  
....................   delay_us(105);       // Retardo de 105us  
086D:  MOVLW  AE
086E:  MOVWF  77
086F:  DECFSZ 77,F
0870:  GOTO   06F
0871:  NOP
0872:  NOP
....................   
....................   //6.  
....................   bit_set(PORTE,E);    // E=1  
0873:  BSF    09.0
....................   output_b(0x30);      // PORTB = 30H  
0874:  MOVLW  00
0875:  BSF    03.5
0876:  MOVWF  06
0877:  MOVLW  30
0878:  BCF    03.5
0879:  MOVWF  06
....................   bit_clear(PORTE,E);  // E=0  
087A:  BCF    09.0
....................   
....................   // Ahora debe haber retardos de 2ms entre cada  
....................   // cada instruccion para que puedan ser leidos  
....................   // por la LCD.  
....................   
....................   delay_ms(2);         // Retardo de 2ms  
087B:  MOVLW  02
087C:  MOVWF  42
087D:  BCF    0A.3
087E:  CALL   004
087F:  BSF    0A.3
....................   
....................   //7. Function Set  
....................   bit_set(PORTE,E);    // E=1  
0880:  BSF    09.0
....................   output_b(0x38);      // PORTB = 38H  
0881:  MOVLW  00
0882:  BSF    03.5
0883:  MOVWF  06
0884:  MOVLW  38
0885:  BCF    03.5
0886:  MOVWF  06
....................   bit_clear(PORTE,E);  // E=0  
0887:  BCF    09.0
....................   
....................   delay_ms(2);         // Retardo de 2ms  
0888:  MOVLW  02
0889:  MOVWF  42
088A:  BCF    0A.3
088B:  CALL   004
088C:  BSF    0A.3
....................   
....................   //8. Display Off  
....................   bit_set(PORTE,E);    // E=1  
088D:  BSF    09.0
....................   output_b(0x08);      // PORTB = 08H  
088E:  MOVLW  00
088F:  BSF    03.5
0890:  MOVWF  06
0891:  MOVLW  08
0892:  BCF    03.5
0893:  MOVWF  06
....................   bit_clear(PORTE,E);  // E=0  
0894:  BCF    09.0
....................   
....................   delay_ms(2);         // Retardo de 2ms  
0895:  MOVLW  02
0896:  MOVWF  42
0897:  BCF    0A.3
0898:  CALL   004
0899:  BSF    0A.3
....................   
....................   //9. Display Clear  
....................   bit_set(PORTE,E);    // E=1  
089A:  BSF    09.0
....................   output_b(0x01);      // PORTB = 01H  
089B:  MOVLW  00
089C:  BSF    03.5
089D:  MOVWF  06
089E:  MOVLW  01
089F:  BCF    03.5
08A0:  MOVWF  06
....................   bit_clear(PORTE,E);  // E=0  
08A1:  BCF    09.0
....................   
....................   delay_ms(2);         // Retardo de 2ms  
08A2:  MOVLW  02
08A3:  MOVWF  42
08A4:  BCF    0A.3
08A5:  CALL   004
08A6:  BSF    0A.3
....................   
....................   //10. Entry Mode Set  
....................   bit_set(PORTE,E);    // E=1  
08A7:  BSF    09.0
....................   output_b(0x06);      // PORTB = 06H  
08A8:  MOVLW  00
08A9:  BSF    03.5
08AA:  MOVWF  06
08AB:  MOVLW  06
08AC:  BCF    03.5
08AD:  MOVWF  06
....................   bit_clear(PORTE,E);  // E=0  
08AE:  BCF    09.0
....................   
....................   delay_ms(2);         // Retardo de 2ms  
08AF:  MOVLW  02
08B0:  MOVWF  42
08B1:  BCF    0A.3
08B2:  CALL   004
08B3:  BSF    0A.3
....................   
....................   //------------------------------------//  
....................   // Fin de la Inicializacion de la LCD //  
....................   //------------------------------------//  
....................   
....................   //Enciende el display  
....................   bit_set(PORTE,E);    // E=1  
08B4:  BSF    09.0
....................   output_b(0x0C);      // PORTB = 0CH  
08B5:  MOVLW  00
08B6:  BSF    03.5
08B7:  MOVWF  06
08B8:  MOVLW  0C
08B9:  BCF    03.5
08BA:  MOVWF  06
....................   bit_clear(PORTE,E);  // E=0  
08BB:  BCF    09.0
....................   
....................   delay_ms(2);         // Retardo de 2ms  
08BC:  MOVLW  02
08BD:  MOVWF  42
08BE:  BCF    0A.3
08BF:  CALL   004
08C0:  BSF    0A.3
....................   
....................   //-----------------------------------//  
....................   //        Escribir Caracteres        //  
....................   //-----------------------------------//  
....................   
....................   // LIMPIAR PUERTO B  
....................   output_b(0x00);  
08C1:  MOVLW  00
08C2:  BSF    03.5
08C3:  MOVWF  06
08C4:  BCF    03.5
08C5:  CLRF   06
....................   
....................   // Pasar a modo dato  
....................   bit_set(PORTE,RS);   // RS=1  
08C6:  BSF    09.2
....................   bit_clear(PORTE,RW); // RW=0  
08C7:  BCF    09.1
....................   
....................   delay_ms(2);         // Retardo de 2ms  
08C8:  MOVLW  02
08C9:  MOVWF  42
08CA:  BCF    0A.3
08CB:  CALL   004
08CC:  BSF    0A.3
.................... //********************************************************************************************//  
.................... //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% MENSAJE DE BIENVENIDA %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%//  
....................   fncEscribe('W');  
08CD:  MOVLW  57
08CE:  BSF    03.5
08CF:  MOVWF  6D
08D0:  BCF    0A.3
08D1:  BCF    03.5
08D2:  CALL   017
08D3:  BSF    0A.3
....................   fncEscribe('E');  
08D4:  MOVLW  45
08D5:  BSF    03.5
08D6:  MOVWF  6D
08D7:  BCF    0A.3
08D8:  BCF    03.5
08D9:  CALL   017
08DA:  BSF    0A.3
....................   fncEscribe('L');  
08DB:  MOVLW  4C
08DC:  BSF    03.5
08DD:  MOVWF  6D
08DE:  BCF    0A.3
08DF:  BCF    03.5
08E0:  CALL   017
08E1:  BSF    0A.3
....................   fncEscribe('C');  
08E2:  MOVLW  43
08E3:  BSF    03.5
08E4:  MOVWF  6D
08E5:  BCF    0A.3
08E6:  BCF    03.5
08E7:  CALL   017
08E8:  BSF    0A.3
....................   fncEscribe('O');  
08E9:  MOVLW  4F
08EA:  BSF    03.5
08EB:  MOVWF  6D
08EC:  BCF    0A.3
08ED:  BCF    03.5
08EE:  CALL   017
08EF:  BSF    0A.3
....................   fncEscribe('M');  
08F0:  MOVLW  4D
08F1:  BSF    03.5
08F2:  MOVWF  6D
08F3:  BCF    0A.3
08F4:  BCF    03.5
08F5:  CALL   017
08F6:  BSF    0A.3
....................   fncEscribe('E');  
08F7:  MOVLW  45
08F8:  BSF    03.5
08F9:  MOVWF  6D
08FA:  BCF    0A.3
08FB:  BCF    03.5
08FC:  CALL   017
08FD:  BSF    0A.3
....................   
....................   // Modo comando  
....................   bit_clear(PORTE,RS);  
08FE:  BCF    09.2
....................   bit_clear(PORTE,RW);  
08FF:  BCF    09.1
....................   
....................   // Pocicion cursor  
....................   bit_set(PORTE,E);    // E=1  
0900:  BSF    09.0
....................   output_b(0xC6);      // cursor = pocicion 46 LCD  
0901:  MOVLW  00
0902:  BSF    03.5
0903:  MOVWF  06
0904:  MOVLW  C6
0905:  BCF    03.5
0906:  MOVWF  06
....................   bit_clear(PORTE,E);  // E=0  
0907:  BCF    09.0
....................   delay_us(50);  
0908:  MOVLW  53
0909:  MOVWF  77
090A:  DECFSZ 77,F
090B:  GOTO   10A
....................   
....................   // Pasar a modo dato  
....................   bit_set(PORTE,RS);   // RS=1  
090C:  BSF    09.2
....................   bit_clear(PORTE,RW); // RW=0  
090D:  BCF    09.1
....................   
....................   delay_ms(2);         // Retardo de 2ms  
090E:  MOVLW  02
090F:  MOVWF  42
0910:  BCF    0A.3
0911:  CALL   004
0912:  BSF    0A.3
.................... //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%//  
.................... //&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& CLAVE DE EQUIPO &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&//  
....................   fncEscribe('6');  
0913:  MOVLW  36
0914:  BSF    03.5
0915:  MOVWF  6D
0916:  BCF    0A.3
0917:  BCF    03.5
0918:  CALL   017
0919:  BSF    0A.3
....................   fncEscribe('E');  
091A:  MOVLW  45
091B:  BSF    03.5
091C:  MOVWF  6D
091D:  BCF    0A.3
091E:  BCF    03.5
091F:  CALL   017
0920:  BSF    0A.3
....................   fncEscribe(' ');  
0921:  MOVLW  20
0922:  BSF    03.5
0923:  MOVWF  6D
0924:  BCF    0A.3
0925:  BCF    03.5
0926:  CALL   017
0927:  BSF    0A.3
....................   fncEscribe('2');  
0928:  MOVLW  32
0929:  BSF    03.5
092A:  MOVWF  6D
092B:  BCF    0A.3
092C:  BCF    03.5
092D:  CALL   017
092E:  BSF    0A.3
....................   
....................   // Modo comando  
....................   bit_clear(PORTE,RS);  
092F:  BCF    09.2
....................   bit_clear(PORTE,RW);  
0930:  BCF    09.1
....................   
....................   // Retorno a Casa  
....................   bit_set(PORTE,E);    // E=1  
0931:  BSF    09.0
....................   output_b(0x02);      // cursor = pocicion 0 LCD  
0932:  MOVLW  00
0933:  BSF    03.5
0934:  MOVWF  06
0935:  MOVLW  02
0936:  BCF    03.5
0937:  MOVWF  06
....................   bit_clear(PORTE,E);  // E=0  
0938:  BCF    09.0
....................   delay_ms(2);         // Retardo de 2ms  
0939:  MOVWF  42
093A:  BCF    0A.3
093B:  CALL   004
093C:  BSF    0A.3
....................   
....................   // Parpadeo del cursor  
....................   bit_set(PORTE,E);    // E=1  
093D:  BSF    09.0
....................   output_b(0x0F);      // PORTB = 1111xb  
093E:  MOVLW  00
093F:  BSF    03.5
0940:  MOVWF  06
0941:  MOVLW  0F
0942:  BCF    03.5
0943:  MOVWF  06
....................   bit_clear(PORTE,E);  // E=0  
0944:  BCF    09.0
....................   
....................   delay_ms(2);         // Retardo de 2ms  
0945:  MOVLW  02
0946:  MOVWF  42
0947:  BCF    0A.3
0948:  CALL   004
0949:  BSF    0A.3
.................... //&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&//  
....................   
....................   while(1){  
....................   
....................     while( bit_test( PORTD,0 )==1 );  
094A:  MOVLW  00
094B:  BTFSC  08.0
094C:  MOVLW  01
094D:  SUBLW  01
094E:  BTFSC  03.2
094F:  GOTO   14A
....................       DATA11[cont++] = bit_test(PORTD,1);  
0950:  MOVF   22,W
0951:  INCF   22,F
0952:  ADDLW  23
0953:  MOVWF  04
0954:  MOVLW  00
0955:  BTFSC  08.1
0956:  MOVLW  01
0957:  MOVWF  00
....................   
....................     while( bit_test( PORTD,0 )==0 );  
0958:  MOVLW  00
0959:  BTFSC  08.0
095A:  MOVLW  01
095B:  XORLW  00
095C:  BTFSC  03.2
095D:  GOTO   158
....................   
....................       if( cont==11 ){  
095E:  MOVF   22,W
095F:  SUBLW  0B
0960:  BTFSS  03.2
0961:  GOTO   2F1
....................   
....................         int i;  
....................         cont=0;  
0962:  CLRF   22
....................   
....................         for( i=1; i<=8; i++ ){  
0963:  MOVLW  01
0964:  MOVWF  40
0965:  MOVF   40,W
0966:  SUBLW  08
0967:  BTFSS  03.0
0968:  GOTO   190
....................   
....................           if(DATA11[i]==1)  
....................             bit_set(DATA,8-i);  
0969:  MOVLW  23
096A:  ADDWF  40,W
096B:  MOVWF  04
096C:  DECFSZ 00,W
096D:  GOTO   17E
096E:  MOVF   40,W
096F:  SUBLW  08
0970:  MOVWF  41
0971:  MOVLW  01
0972:  MOVWF  77
0973:  MOVF   41,W
0974:  MOVWF  78
0975:  BTFSC  03.2
0976:  GOTO   17B
0977:  BCF    03.0
0978:  RLF    77,F
0979:  DECFSZ 78,F
097A:  GOTO   177
097B:  MOVF   77,W
097C:  IORWF  2E,F
....................   
....................           else  
....................             bit_clear(DATA,8-i);  
097D:  GOTO   18E
097E:  MOVF   40,W
097F:  SUBLW  08
0980:  MOVWF  41
0981:  MOVLW  01
0982:  MOVWF  77
0983:  MOVF   41,W
0984:  MOVWF  78
0985:  BTFSC  03.2
0986:  GOTO   18B
0987:  BCF    03.0
0988:  RLF    77,F
0989:  DECFSZ 78,F
098A:  GOTO   187
098B:  MOVF   77,W
098C:  XORLW  FF
098D:  ANDWF  2E,F
....................   
....................         }  
098E:  INCF   40,F
098F:  GOTO   165
....................   
....................         // Pasar a modo dato  
....................         bit_set(PORTE,RS);   // RS=1  
0990:  BSF    09.2
....................         bit_clear(PORTE,RW); // RW=0  
0991:  BCF    09.1
....................         delay_ms(25);        // Retardo de 2ms  
0992:  MOVLW  19
0993:  MOVWF  42
0994:  BCF    0A.3
0995:  CALL   004
0996:  BSF    0A.3
....................   
....................         if(DATA!=0x0F){      // Si es diferente del Codigo de Liberacion de Tecla  
0997:  MOVF   2E,W
0998:  SUBLW  0F
0999:  BTFSC  03.2
099A:  GOTO   2F1
....................   
....................           switch(DATA){  
099B:  MOVF   2E,W
099C:  MOVWF  77
099D:  MOVLW  38
099E:  SUBWF  77,W
099F:  BTFSC  03.2
09A0:  GOTO   212
09A1:  MOVLW  4C
09A2:  SUBWF  77,W
09A3:  BTFSC  03.2
09A4:  GOTO   218
09A5:  MOVLW  84
09A6:  SUBWF  77,W
09A7:  BTFSC  03.2
09A8:  GOTO   21E
09A9:  MOVLW  C4
09AA:  SUBWF  77,W
09AB:  BTFSC  03.2
09AC:  GOTO   224
09AD:  MOVLW  24
09AE:  SUBWF  77,W
09AF:  BTFSC  03.2
09B0:  GOTO   22A
09B1:  MOVLW  D4
09B2:  SUBWF  77,W
09B3:  BTFSC  03.2
09B4:  GOTO   230
09B5:  MOVLW  2C
09B6:  SUBWF  77,W
09B7:  BTFSC  03.2
09B8:  GOTO   236
09B9:  MOVLW  CC
09BA:  SUBWF  77,W
09BB:  BTFSC  03.2
09BC:  GOTO   23C
09BD:  MOVLW  C2
09BE:  SUBWF  77,W
09BF:  BTFSC  03.2
09C0:  GOTO   242
09C1:  MOVLW  DC
09C2:  SUBWF  77,W
09C3:  BTFSC  03.2
09C4:  GOTO   248
09C5:  MOVLW  42
09C6:  SUBWF  77,W
09C7:  BTFSC  03.2
09C8:  GOTO   24E
09C9:  MOVLW  D2
09CA:  SUBWF  77,W
09CB:  BTFSC  03.2
09CC:  GOTO   254
09CD:  MOVLW  5C
09CE:  SUBWF  77,W
09CF:  BTFSC  03.2
09D0:  GOTO   25A
09D1:  MOVLW  8C
09D2:  SUBWF  77,W
09D3:  BTFSC  03.2
09D4:  GOTO   260
09D5:  MOVLW  22
09D6:  SUBWF  77,W
09D7:  BTFSC  03.2
09D8:  GOTO   266
09D9:  MOVLW  B2
09DA:  SUBWF  77,W
09DB:  BTFSC  03.2
09DC:  GOTO   26C
09DD:  MOVLW  A8
09DE:  SUBWF  77,W
09DF:  BTFSC  03.2
09E0:  GOTO   272
09E1:  MOVLW  B4
09E2:  SUBWF  77,W
09E3:  BTFSC  03.2
09E4:  GOTO   278
09E5:  MOVLW  D8
09E6:  SUBWF  77,W
09E7:  BTFSC  03.2
09E8:  GOTO   27E
09E9:  MOVLW  34
09EA:  SUBWF  77,W
09EB:  BTFSC  03.2
09EC:  GOTO   284
09ED:  MOVLW  3C
09EE:  SUBWF  77,W
09EF:  BTFSC  03.2
09F0:  GOTO   28A
09F1:  MOVLW  54
09F2:  SUBWF  77,W
09F3:  BTFSC  03.2
09F4:  GOTO   290
09F5:  MOVLW  B8
09F6:  SUBWF  77,W
09F7:  BTFSC  03.2
09F8:  GOTO   296
09F9:  MOVLW  44
09FA:  SUBWF  77,W
09FB:  BTFSC  03.2
09FC:  GOTO   29C
09FD:  MOVLW  AC
09FE:  SUBWF  77,W
09FF:  BTFSC  03.2
0A00:  GOTO   2A2
0A01:  MOVLW  58
0A02:  SUBWF  77,W
0A03:  BTFSC  03.2
0A04:  GOTO   2A8
0A05:  MOVLW  94
0A06:  SUBWF  77,W
0A07:  BTFSC  03.2
0A08:  GOTO   2AE
0A09:  MOVLW  6E
0A0A:  SUBWF  77,W
0A0B:  BTFSC  03.2
0A0C:  GOTO   2B4
0A0D:  MOVLW  5A
0A0E:  SUBWF  77,W
0A0F:  BTFSC  03.2
0A10:  GOTO   2BB
0A11:  GOTO   2F1
....................   
....................             case 0x38:  
....................               fncRecibeC('A');  
0A12:  MOVLW  41
0A13:  MOVWF  41
0A14:  BCF    0A.3
0A15:  CALL   024
0A16:  BSF    0A.3
....................             break;  
0A17:  GOTO   2F1
....................   
....................             case 0x4C:  
....................               fncRecibeC('B');  
0A18:  MOVLW  42
0A19:  MOVWF  41
0A1A:  BCF    0A.3
0A1B:  CALL   024
0A1C:  BSF    0A.3
....................             break;  
0A1D:  GOTO   2F1
....................   
....................             case 0x84:  
....................               fncRecibeC('C');  
0A1E:  MOVLW  43
0A1F:  MOVWF  41
0A20:  BCF    0A.3
0A21:  CALL   024
0A22:  BSF    0A.3
....................             break;  
0A23:  GOTO   2F1
....................   
....................             case 0xC4:  
....................               fncRecibeC('D');  
0A24:  MOVLW  44
0A25:  MOVWF  41
0A26:  BCF    0A.3
0A27:  CALL   024
0A28:  BSF    0A.3
....................             break;  
0A29:  GOTO   2F1
....................   
....................             case 0x24:  
....................               fncRecibeC('E');  
0A2A:  MOVLW  45
0A2B:  MOVWF  41
0A2C:  BCF    0A.3
0A2D:  CALL   024
0A2E:  BSF    0A.3
....................             break;  
0A2F:  GOTO   2F1
....................   
....................             case 0xD4:  
....................               fncRecibeC('F');  
0A30:  MOVLW  46
0A31:  MOVWF  41
0A32:  BCF    0A.3
0A33:  CALL   024
0A34:  BSF    0A.3
....................             break;  
0A35:  GOTO   2F1
....................   
....................             case 0x2C:  
....................               fncRecibeC('G');  
0A36:  MOVLW  47
0A37:  MOVWF  41
0A38:  BCF    0A.3
0A39:  CALL   024
0A3A:  BSF    0A.3
....................             break;  
0A3B:  GOTO   2F1
....................   
....................             case 0xCC:  
....................               fncRecibeC('H');  
0A3C:  MOVLW  48
0A3D:  MOVWF  41
0A3E:  BCF    0A.3
0A3F:  CALL   024
0A40:  BSF    0A.3
....................             break;  
0A41:  GOTO   2F1
....................   
....................             case 0xC2:  
....................               fncRecibeC('I');  
0A42:  MOVLW  49
0A43:  MOVWF  41
0A44:  BCF    0A.3
0A45:  CALL   024
0A46:  BSF    0A.3
....................             break;  
0A47:  GOTO   2F1
....................   
....................             case 0xDC:  
....................               fncRecibeC('J');  
0A48:  MOVLW  4A
0A49:  MOVWF  41
0A4A:  BCF    0A.3
0A4B:  CALL   024
0A4C:  BSF    0A.3
....................             break;  
0A4D:  GOTO   2F1
....................   
....................             case 0x42:  
....................               fncRecibeC('K');  
0A4E:  MOVLW  4B
0A4F:  MOVWF  41
0A50:  BCF    0A.3
0A51:  CALL   024
0A52:  BSF    0A.3
....................             break;  
0A53:  GOTO   2F1
....................   
....................             case 0xD2:  
....................               fncRecibeC('L');  
0A54:  MOVLW  4C
0A55:  MOVWF  41
0A56:  BCF    0A.3
0A57:  CALL   024
0A58:  BSF    0A.3
....................             break;  
0A59:  GOTO   2F1
....................   
....................             case 0x5C:  
....................               fncRecibeC('M');  
0A5A:  MOVLW  4D
0A5B:  MOVWF  41
0A5C:  BCF    0A.3
0A5D:  CALL   024
0A5E:  BSF    0A.3
....................             break;  
0A5F:  GOTO   2F1
....................   
....................             case 0x8C:  
....................               fncRecibeC('N');  
0A60:  MOVLW  4E
0A61:  MOVWF  41
0A62:  BCF    0A.3
0A63:  CALL   024
0A64:  BSF    0A.3
....................             break;  
0A65:  GOTO   2F1
....................   
....................             case 0x22:  
....................               fncRecibeC('O');  
0A66:  MOVLW  4F
0A67:  MOVWF  41
0A68:  BCF    0A.3
0A69:  CALL   024
0A6A:  BSF    0A.3
....................             break;  
0A6B:  GOTO   2F1
....................   
....................             case 0xB2:  
....................               fncRecibeC('P');  
0A6C:  MOVLW  50
0A6D:  MOVWF  41
0A6E:  BCF    0A.3
0A6F:  CALL   024
0A70:  BSF    0A.3
....................             break;  
0A71:  GOTO   2F1
....................   
....................             case 0xA8:  
....................               fncRecibeC('Q');  
0A72:  MOVLW  51
0A73:  MOVWF  41
0A74:  BCF    0A.3
0A75:  CALL   024
0A76:  BSF    0A.3
....................             break;  
0A77:  GOTO   2F1
....................   
....................             case 0xB4:  
....................               fncRecibeC('R');  
0A78:  MOVLW  52
0A79:  MOVWF  41
0A7A:  BCF    0A.3
0A7B:  CALL   024
0A7C:  BSF    0A.3
....................             break;  
0A7D:  GOTO   2F1
....................   
....................             case 0xD8:  
....................               fncRecibeC('S');  
0A7E:  MOVLW  53
0A7F:  MOVWF  41
0A80:  BCF    0A.3
0A81:  CALL   024
0A82:  BSF    0A.3
....................             break;  
0A83:  GOTO   2F1
....................   
....................             case 0x34:  
....................               fncRecibeC('T');  
0A84:  MOVLW  54
0A85:  MOVWF  41
0A86:  BCF    0A.3
0A87:  CALL   024
0A88:  BSF    0A.3
....................             break;  
0A89:  GOTO   2F1
....................   
....................             case 0X3C:  
....................               fncRecibeC('U');  
0A8A:  MOVLW  55
0A8B:  MOVWF  41
0A8C:  BCF    0A.3
0A8D:  CALL   024
0A8E:  BSF    0A.3
....................             break;  
0A8F:  GOTO   2F1
....................   
....................             case 0x54:  
....................               fncRecibeC('V');  
0A90:  MOVLW  56
0A91:  MOVWF  41
0A92:  BCF    0A.3
0A93:  CALL   024
0A94:  BSF    0A.3
....................             break;  
0A95:  GOTO   2F1
....................   
....................             case 0xB8:  
....................               fncRecibeC('W');  
0A96:  MOVLW  57
0A97:  MOVWF  41
0A98:  BCF    0A.3
0A99:  CALL   024
0A9A:  BSF    0A.3
....................             break;  
0A9B:  GOTO   2F1
....................   
....................             case 0x44:  
....................               fncRecibeC('X');  
0A9C:  MOVLW  58
0A9D:  MOVWF  41
0A9E:  BCF    0A.3
0A9F:  CALL   024
0AA0:  BSF    0A.3
....................             break;  
0AA1:  GOTO   2F1
....................   
....................             case 0xAC:  
....................               fncRecibeC('Y');  
0AA2:  MOVLW  59
0AA3:  MOVWF  41
0AA4:  BCF    0A.3
0AA5:  CALL   024
0AA6:  BSF    0A.3
....................             break;  
0AA7:  GOTO   2F1
....................   
....................             case 0x58:  
....................               fncRecibeC('Z');  
0AA8:  MOVLW  5A
0AA9:  MOVWF  41
0AAA:  BCF    0A.3
0AAB:  CALL   024
0AAC:  BSF    0A.3
....................             break;  
0AAD:  GOTO   2F1
....................   
....................             case 0x94:  
....................               fncRecibeC(' ');  
0AAE:  MOVLW  20
0AAF:  MOVWF  41
0AB0:  BCF    0A.3
0AB1:  CALL   024
0AB2:  BSF    0A.3
....................             break;  
0AB3:  GOTO   2F1
....................   
....................             case 0x6E: // ESC  
....................               fnLimpCad();  
0AB4:  BCF    0A.3
0AB5:  GOTO   03B
0AB6:  BSF    0A.3
....................               fncClear();  
0AB7:  BCF    0A.3
0AB8:  CALL   04C
0AB9:  BSF    0A.3
....................             break;  
0ABA:  GOTO   2F1
....................   
....................             case 0x5A: // ENTER  
....................               fncRecibeC('\n');  
0ABB:  MOVLW  0A
0ABC:  MOVWF  41
0ABD:  BCF    0A.3
0ABE:  CALL   024
0ABF:  BSF    0A.3
....................               delay_ms(250);  
0AC0:  MOVLW  FA
0AC1:  MOVWF  42
0AC2:  BCF    0A.3
0AC3:  CALL   004
0AC4:  BSF    0A.3
....................               fncClear();  
0AC5:  BCF    0A.3
0AC6:  CALL   04C
0AC7:  BSF    0A.3
....................               delay_ms(300);  
0AC8:  MOVLW  02
0AC9:  MOVWF  41
0ACA:  MOVLW  96
0ACB:  MOVWF  42
0ACC:  BCF    0A.3
0ACD:  CALL   004
0ACE:  BSF    0A.3
0ACF:  DECFSZ 41,F
0AD0:  GOTO   2CA
....................               fnComparaC(cadena);  
0AD1:  MOVLW  2F
0AD2:  MOVWF  41
0AD3:  BCF    0A.3
0AD4:  GOTO   082
0AD5:  BSF    0A.3
....................               delay_ms(400);  
0AD6:  MOVLW  02
0AD7:  MOVWF  41
0AD8:  MOVLW  C8
0AD9:  MOVWF  42
0ADA:  BCF    0A.3
0ADB:  CALL   004
0ADC:  BSF    0A.3
0ADD:  DECFSZ 41,F
0ADE:  GOTO   2D8
....................   
....................               for(i=0;i<40;i++){  
0ADF:  CLRF   40
0AE0:  MOVF   40,W
0AE1:  SUBLW  27
0AE2:  BTFSS  03.0
0AE3:  GOTO   2F0
....................                 RecorDispDer();  
0AE4:  GOTO   000
....................                 delay_ms(500);  
0AE5:  MOVLW  02
0AE6:  MOVWF  41
0AE7:  MOVLW  FA
0AE8:  MOVWF  42
0AE9:  BCF    0A.3
0AEA:  CALL   004
0AEB:  BSF    0A.3
0AEC:  DECFSZ 41,F
0AED:  GOTO   2E7
....................               }  
0AEE:  INCF   40,F
0AEF:  GOTO   2E0
....................   
....................             break;  
0AF0:  GOTO   2F1
....................   
....................           }//switch  
....................         }//if  
....................       }//if  
....................   }//while  
0AF1:  GOTO   14A
.................... }//main  
....................   
.................... void fnComparaC(char str[]){  
.................... //######################################### COMANDOS #########################################//  
0AF2:  SLEEP
....................    char c1[]={'A','P','E','L','L','I','D','O','S','O',' ','\0'}; // APELLIDOS INICIAN CON "O"  
*
0082:  MOVLW  41
0083:  MOVWF  42
0084:  MOVLW  50
0085:  MOVWF  43
0086:  MOVLW  45
0087:  MOVWF  44
0088:  MOVLW  4C
0089:  MOVWF  45
008A:  MOVWF  46
008B:  MOVLW  49
008C:  MOVWF  47
008D:  MOVLW  44
008E:  MOVWF  48
008F:  MOVLW  4F
0090:  MOVWF  49
0091:  MOVLW  53
0092:  MOVWF  4A
0093:  MOVLW  4F
0094:  MOVWF  4B
0095:  MOVLW  20
0096:  MOVWF  4C
0097:  CLRF   4D
....................    char c2[]={'P','O','S','G','R','A','D','O','D',' ','\0'};     // MAESTRIAS EN FAC DISEÑO  
0098:  MOVLW  50
0099:  MOVWF  4E
009A:  MOVLW  4F
009B:  MOVWF  4F
009C:  MOVLW  53
009D:  MOVWF  50
009E:  MOVLW  47
009F:  MOVWF  51
00A0:  MOVLW  52
00A1:  MOVWF  52
00A2:  MOVLW  41
00A3:  MOVWF  53
00A4:  MOVLW  44
00A5:  MOVWF  54
00A6:  MOVLW  4F
00A7:  MOVWF  55
00A8:  MOVLW  44
00A9:  MOVWF  56
00AA:  MOVLW  20
00AB:  MOVWF  57
00AC:  CLRF   58
....................    char c3[]={'A','P','E','L','L','I','D','O','S','Q',' ','\0'}; // APELLIDOS CON "Q"  
00AD:  MOVLW  41
00AE:  MOVWF  59
00AF:  MOVLW  50
00B0:  MOVWF  5A
00B1:  MOVLW  45
00B2:  MOVWF  5B
00B3:  MOVLW  4C
00B4:  MOVWF  5C
00B5:  MOVWF  5D
00B6:  MOVLW  49
00B7:  MOVWF  5E
00B8:  MOVLW  44
00B9:  MOVWF  5F
00BA:  MOVLW  4F
00BB:  MOVWF  60
00BC:  MOVLW  53
00BD:  MOVWF  61
00BE:  MOVLW  51
00BF:  MOVWF  62
00C0:  MOVLW  20
00C1:  MOVWF  63
00C2:  CLRF   64
....................    char c4[]={'L','E','N','G','U','A','S','S','E','N',' ','\0'}; // LENGUAS HABLADAS EN SENEGAL  
00C3:  MOVLW  4C
00C4:  MOVWF  65
00C5:  MOVLW  45
00C6:  MOVWF  66
00C7:  MOVLW  4E
00C8:  MOVWF  67
00C9:  MOVLW  47
00CA:  MOVWF  68
00CB:  MOVLW  55
00CC:  MOVWF  69
00CD:  MOVLW  41
00CE:  MOVWF  6A
00CF:  MOVLW  53
00D0:  MOVWF  6B
00D1:  MOVWF  6C
00D2:  MOVLW  45
00D3:  MOVWF  6D
00D4:  MOVLW  4E
00D5:  MOVWF  6E
00D6:  MOVLW  20
00D7:  MOVWF  6F
00D8:  CLRF   70
....................    char c5[]={'N','O','M','B','R','E','S','H','J',' ','\0'};     // NOMBRES DE HOMBRE CON "J"  
00D9:  MOVLW  4E
00DA:  BSF    03.5
00DB:  MOVWF  20
00DC:  MOVLW  4F
00DD:  MOVWF  21
00DE:  MOVLW  4D
00DF:  MOVWF  22
00E0:  MOVLW  42
00E1:  MOVWF  23
00E2:  MOVLW  52
00E3:  MOVWF  24
00E4:  MOVLW  45
00E5:  MOVWF  25
00E6:  MOVLW  53
00E7:  MOVWF  26
00E8:  MOVLW  48
00E9:  MOVWF  27
00EA:  MOVLW  4A
00EB:  MOVWF  28
00EC:  MOVLW  20
00ED:  MOVWF  29
00EE:  CLRF   2A
....................    char c6[]={'L','E','N','G','U','A','S','B','A','N',' ','\0'}; // LENGUAS HABLADAS EN BANGLADESH  
00EF:  MOVLW  4C
00F0:  MOVWF  2B
00F1:  MOVLW  45
00F2:  MOVWF  2C
00F3:  MOVLW  4E
00F4:  MOVWF  2D
00F5:  MOVLW  47
00F6:  MOVWF  2E
00F7:  MOVLW  55
00F8:  MOVWF  2F
00F9:  MOVLW  41
00FA:  MOVWF  30
00FB:  MOVLW  53
00FC:  MOVWF  31
00FD:  MOVLW  42
00FE:  MOVWF  32
00FF:  MOVLW  41
0100:  MOVWF  33
0101:  MOVLW  4E
0102:  MOVWF  34
0103:  MOVLW  20
0104:  MOVWF  35
0105:  CLRF   36
....................    char c7[]={'E','Q','U','I','P','O','S',' ','\0'};             // EQUIPOS LIGA MX  
0106:  MOVLW  45
0107:  MOVWF  37
0108:  MOVLW  51
0109:  MOVWF  38
010A:  MOVLW  55
010B:  MOVWF  39
010C:  MOVLW  49
010D:  MOVWF  3A
010E:  MOVLW  50
010F:  MOVWF  3B
0110:  MOVLW  4F
0111:  MOVWF  3C
0112:  MOVLW  53
0113:  MOVWF  3D
0114:  MOVLW  20
0115:  MOVWF  3E
0116:  CLRF   3F
....................    char c8[]={'E','N','P','C','I','N','C','O',' ','\0'};         // NOMBRE Y DIRECCION ENP5  
0117:  MOVLW  45
0118:  MOVWF  40
0119:  MOVLW  4E
011A:  MOVWF  41
011B:  MOVLW  50
011C:  MOVWF  42
011D:  MOVLW  43
011E:  MOVWF  43
011F:  MOVLW  49
0120:  MOVWF  44
0121:  MOVLW  4E
0122:  MOVWF  45
0123:  MOVLW  43
0124:  MOVWF  46
0125:  MOVLW  4F
0126:  MOVWF  47
0127:  MOVLW  20
0128:  MOVWF  48
0129:  CLRF   49
.................... //############################################################################################//  
.................... //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ACCIONES @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//  
.................... //+++++++++++++++++++++++++ Muestra cinco apellidos con la inicial O +++++++++++++++++++++++++//  
....................     if (strcmp (c1,str) == 0){  
012A:  MOVLW  42
012B:  MOVWF  6A
012C:  BCF    03.5
012D:  MOVF   41,W
012E:  BSF    03.5
012F:  MOVWF  6B
0130:  BCF    03.5
0131:  CALL   059
0132:  MOVF   78,F
0133:  BTFSS  03.2
0134:  GOTO   1F4
.................... //1.-  
....................       fncEscribe('O');  
0135:  MOVLW  4F
0136:  BSF    03.5
0137:  MOVWF  6D
0138:  BCF    03.5
0139:  CALL   017
....................       fncEscribe('L');  
013A:  MOVLW  4C
013B:  BSF    03.5
013C:  MOVWF  6D
013D:  BCF    03.5
013E:  CALL   017
....................       fncEscribe('I');  
013F:  MOVLW  49
0140:  BSF    03.5
0141:  MOVWF  6D
0142:  BCF    03.5
0143:  CALL   017
....................       fncEscribe('V');  
0144:  MOVLW  56
0145:  BSF    03.5
0146:  MOVWF  6D
0147:  BCF    03.5
0148:  CALL   017
....................       fncEscribe('A');  
0149:  MOVLW  41
014A:  BSF    03.5
014B:  MOVWF  6D
014C:  BCF    03.5
014D:  CALL   017
....................       fncEscribe(' ');  
014E:  MOVLW  20
014F:  BSF    03.5
0150:  MOVWF  6D
0151:  BCF    03.5
0152:  CALL   017
.................... //2.-  
....................       fncEscribe('O');  
0153:  MOVLW  4F
0154:  BSF    03.5
0155:  MOVWF  6D
0156:  BCF    03.5
0157:  CALL   017
....................       fncEscribe('L');  
0158:  MOVLW  4C
0159:  BSF    03.5
015A:  MOVWF  6D
015B:  BCF    03.5
015C:  CALL   017
....................       fncEscribe('I');  
015D:  MOVLW  49
015E:  BSF    03.5
015F:  MOVWF  6D
0160:  BCF    03.5
0161:  CALL   017
....................       fncEscribe('V');  
0162:  MOVLW  56
0163:  BSF    03.5
0164:  MOVWF  6D
0165:  BCF    03.5
0166:  CALL   017
....................       fncEscribe('E');  
0167:  MOVLW  45
0168:  BSF    03.5
0169:  MOVWF  6D
016A:  BCF    03.5
016B:  CALL   017
....................       fncEscribe('N');  
016C:  MOVLW  4E
016D:  BSF    03.5
016E:  MOVWF  6D
016F:  BCF    03.5
0170:  CALL   017
....................       fncEscribe('C');  
0171:  MOVLW  43
0172:  BSF    03.5
0173:  MOVWF  6D
0174:  BCF    03.5
0175:  CALL   017
....................       fncEscribe('I');  
0176:  MOVLW  49
0177:  BSF    03.5
0178:  MOVWF  6D
0179:  BCF    03.5
017A:  CALL   017
....................       fncEscribe('A');  
017B:  MOVLW  41
017C:  BSF    03.5
017D:  MOVWF  6D
017E:  BCF    03.5
017F:  CALL   017
....................       fncEscribe(' ');  
0180:  MOVLW  20
0181:  BSF    03.5
0182:  MOVWF  6D
0183:  BCF    03.5
0184:  CALL   017
.................... //3.-  
....................       fncEscribe('O');  
0185:  MOVLW  4F
0186:  BSF    03.5
0187:  MOVWF  6D
0188:  BCF    03.5
0189:  CALL   017
....................       fncEscribe('L');  
018A:  MOVLW  4C
018B:  BSF    03.5
018C:  MOVWF  6D
018D:  BCF    03.5
018E:  CALL   017
....................       fncEscribe('I');  
018F:  MOVLW  49
0190:  BSF    03.5
0191:  MOVWF  6D
0192:  BCF    03.5
0193:  CALL   017
....................       fncEscribe('V');  
0194:  MOVLW  56
0195:  BSF    03.5
0196:  MOVWF  6D
0197:  BCF    03.5
0198:  CALL   017
....................       fncEscribe('A');  
0199:  MOVLW  41
019A:  BSF    03.5
019B:  MOVWF  6D
019C:  BCF    03.5
019D:  CALL   017
....................       fncEscribe('R');  
019E:  MOVLW  52
019F:  BSF    03.5
01A0:  MOVWF  6D
01A1:  BCF    03.5
01A2:  CALL   017
....................       fncEscribe('E');  
01A3:  MOVLW  45
01A4:  BSF    03.5
01A5:  MOVWF  6D
01A6:  BCF    03.5
01A7:  CALL   017
....................       fncEscribe('S');  
01A8:  MOVLW  53
01A9:  BSF    03.5
01AA:  MOVWF  6D
01AB:  BCF    03.5
01AC:  CALL   017
....................       fncEscribe(' ');  
01AD:  MOVLW  20
01AE:  BSF    03.5
01AF:  MOVWF  6D
01B0:  BCF    03.5
01B1:  CALL   017
.................... //4.-  
....................       fncEscribe('O');  
01B2:  MOVLW  4F
01B3:  BSF    03.5
01B4:  MOVWF  6D
01B5:  BCF    03.5
01B6:  CALL   017
....................       fncEscribe('R');  
01B7:  MOVLW  52
01B8:  BSF    03.5
01B9:  MOVWF  6D
01BA:  BCF    03.5
01BB:  CALL   017
....................       fncEscribe('T');  
01BC:  MOVLW  54
01BD:  BSF    03.5
01BE:  MOVWF  6D
01BF:  BCF    03.5
01C0:  CALL   017
....................       fncEscribe('E');  
01C1:  MOVLW  45
01C2:  BSF    03.5
01C3:  MOVWF  6D
01C4:  BCF    03.5
01C5:  CALL   017
....................       fncEscribe('G');  
01C6:  MOVLW  47
01C7:  BSF    03.5
01C8:  MOVWF  6D
01C9:  BCF    03.5
01CA:  CALL   017
....................       fncEscribe('A');  
01CB:  MOVLW  41
01CC:  BSF    03.5
01CD:  MOVWF  6D
01CE:  BCF    03.5
01CF:  CALL   017
....................       fncEscribe(' ');  
01D0:  MOVLW  20
01D1:  BSF    03.5
01D2:  MOVWF  6D
01D3:  BCF    03.5
01D4:  CALL   017
.................... //5.-  
....................       fncEscribe('O');  
01D5:  MOVLW  4F
01D6:  BSF    03.5
01D7:  MOVWF  6D
01D8:  BCF    03.5
01D9:  CALL   017
....................       fncEscribe('R');  
01DA:  MOVLW  52
01DB:  BSF    03.5
01DC:  MOVWF  6D
01DD:  BCF    03.5
01DE:  CALL   017
....................       fncEscribe('O');  
01DF:  MOVLW  4F
01E0:  BSF    03.5
01E1:  MOVWF  6D
01E2:  BCF    03.5
01E3:  CALL   017
....................       fncEscribe('Z');  
01E4:  MOVLW  5A
01E5:  BSF    03.5
01E6:  MOVWF  6D
01E7:  BCF    03.5
01E8:  CALL   017
....................       fncEscribe('C');  
01E9:  MOVLW  43
01EA:  BSF    03.5
01EB:  MOVWF  6D
01EC:  BCF    03.5
01ED:  CALL   017
....................       fncEscribe('O');  
01EE:  MOVLW  4F
01EF:  BSF    03.5
01F0:  MOVWF  6D
01F1:  BCF    03.5
01F2:  CALL   017
....................     }  
.................... //............. Muestra cinco maestrías que se imparten en la carrera de Diseño ..............//  
....................     else if(strcmp(c2,str)== 0){  
01F3:  GOTO   7F9
01F4:  MOVLW  4E
01F5:  BSF    03.5
01F6:  MOVWF  6A
01F7:  BCF    03.5
01F8:  MOVF   41,W
01F9:  BSF    03.5
01FA:  MOVWF  6B
01FB:  BCF    03.5
01FC:  CALL   059
01FD:  MOVF   78,F
01FE:  BTFSS  03.2
01FF:  GOTO   319
.................... //1.-  
....................       fncEscribe('A');  
0200:  MOVLW  41
0201:  BSF    03.5
0202:  MOVWF  6D
0203:  BCF    03.5
0204:  CALL   017
....................       fncEscribe('R');  
0205:  MOVLW  52
0206:  BSF    03.5
0207:  MOVWF  6D
0208:  BCF    03.5
0209:  CALL   017
....................       fncEscribe('T');  
020A:  MOVLW  54
020B:  BSF    03.5
020C:  MOVWF  6D
020D:  BCF    03.5
020E:  CALL   017
....................       fncEscribe('E');  
020F:  MOVLW  45
0210:  BSF    03.5
0211:  MOVWF  6D
0212:  BCF    03.5
0213:  CALL   017
....................       fncEscribe(' ');  
0214:  MOVLW  20
0215:  BSF    03.5
0216:  MOVWF  6D
0217:  BCF    03.5
0218:  CALL   017
.................... //2.-  
....................       fncEscribe('A');  
0219:  MOVLW  41
021A:  BSF    03.5
021B:  MOVWF  6D
021C:  BCF    03.5
021D:  CALL   017
....................       fncEscribe('M');  
021E:  MOVLW  4D
021F:  BSF    03.5
0220:  MOVWF  6D
0221:  BCF    03.5
0222:  CALL   017
....................       fncEscribe('B');  
0223:  MOVLW  42
0224:  BSF    03.5
0225:  MOVWF  6D
0226:  BCF    03.5
0227:  CALL   017
....................       fncEscribe('I');  
0228:  MOVLW  49
0229:  BSF    03.5
022A:  MOVWF  6D
022B:  BCF    03.5
022C:  CALL   017
....................       fncEscribe('E');  
022D:  MOVLW  45
022E:  BSF    03.5
022F:  MOVWF  6D
0230:  BCF    03.5
0231:  CALL   017
....................       fncEscribe('N');  
0232:  MOVLW  4E
0233:  BSF    03.5
0234:  MOVWF  6D
0235:  BCF    03.5
0236:  CALL   017
....................       fncEscribe('T');  
0237:  MOVLW  54
0238:  BSF    03.5
0239:  MOVWF  6D
023A:  BCF    03.5
023B:  CALL   017
....................       fncEscribe('A');  
023C:  MOVLW  41
023D:  BSF    03.5
023E:  MOVWF  6D
023F:  BCF    03.5
0240:  CALL   017
....................       fncEscribe('C');  
0241:  MOVLW  43
0242:  BSF    03.5
0243:  MOVWF  6D
0244:  BCF    03.5
0245:  CALL   017
....................       fncEscribe('I');  
0246:  MOVLW  49
0247:  BSF    03.5
0248:  MOVWF  6D
0249:  BCF    03.5
024A:  CALL   017
....................       fncEscribe('O');  
024B:  MOVLW  4F
024C:  BSF    03.5
024D:  MOVWF  6D
024E:  BCF    03.5
024F:  CALL   017
....................       fncEscribe('N');  
0250:  MOVLW  4E
0251:  BSF    03.5
0252:  MOVWF  6D
0253:  BCF    03.5
0254:  CALL   017
....................       fncEscribe(' ');  
0255:  MOVLW  20
0256:  BSF    03.5
0257:  MOVWF  6D
0258:  BCF    03.5
0259:  CALL   017
.................... //3.-  
....................       fncEscribe('F');  
025A:  MOVLW  46
025B:  BSF    03.5
025C:  MOVWF  6D
025D:  BCF    03.5
025E:  CALL   017
....................       fncEscribe('O');  
025F:  MOVLW  4F
0260:  BSF    03.5
0261:  MOVWF  6D
0262:  BCF    03.5
0263:  CALL   017
....................       fncEscribe('T');  
0264:  MOVLW  54
0265:  BSF    03.5
0266:  MOVWF  6D
0267:  BCF    03.5
0268:  CALL   017
....................       fncEscribe('O');  
0269:  MOVLW  4F
026A:  BSF    03.5
026B:  MOVWF  6D
026C:  BCF    03.5
026D:  CALL   017
....................       fncEscribe('P');  
026E:  MOVLW  50
026F:  BSF    03.5
0270:  MOVWF  6D
0271:  BCF    03.5
0272:  CALL   017
....................       fncEscribe('E');  
0273:  MOVLW  45
0274:  BSF    03.5
0275:  MOVWF  6D
0276:  BCF    03.5
0277:  CALL   017
....................       fncEscribe('R');  
0278:  MOVLW  52
0279:  BSF    03.5
027A:  MOVWF  6D
027B:  BCF    03.5
027C:  CALL   017
....................       fncEscribe('I');  
027D:  MOVLW  49
027E:  BSF    03.5
027F:  MOVWF  6D
0280:  BCF    03.5
0281:  CALL   017
....................       fncEscribe('O');  
0282:  MOVLW  4F
0283:  BSF    03.5
0284:  MOVWF  6D
0285:  BCF    03.5
0286:  CALL   017
....................       fncEscribe('D');  
0287:  MOVLW  44
0288:  BSF    03.5
0289:  MOVWF  6D
028A:  BCF    03.5
028B:  CALL   017
....................       fncEscribe('I');  
028C:  MOVLW  49
028D:  BSF    03.5
028E:  MOVWF  6D
028F:  BCF    03.5
0290:  CALL   017
....................       fncEscribe('S');  
0291:  MOVLW  53
0292:  BSF    03.5
0293:  MOVWF  6D
0294:  BCF    03.5
0295:  CALL   017
....................       fncEscribe('M');  
0296:  MOVLW  4D
0297:  BSF    03.5
0298:  MOVWF  6D
0299:  BCF    03.5
029A:  CALL   017
....................       fncEscribe('O');  
029B:  MOVLW  4F
029C:  BSF    03.5
029D:  MOVWF  6D
029E:  BCF    03.5
029F:  CALL   017
....................       fncEscribe(' ');  
02A0:  MOVLW  20
02A1:  BSF    03.5
02A2:  MOVWF  6D
02A3:  BCF    03.5
02A4:  CALL   017
.................... //4.-  
....................       fncEscribe('P');  
02A5:  MOVLW  50
02A6:  BSF    03.5
02A7:  MOVWF  6D
02A8:  BCF    03.5
02A9:  CALL   017
....................       fncEscribe('U');  
02AA:  MOVLW  55
02AB:  BSF    03.5
02AC:  MOVWF  6D
02AD:  BCF    03.5
02AE:  CALL   017
....................       fncEscribe('B');  
02AF:  MOVLW  42
02B0:  BSF    03.5
02B1:  MOVWF  6D
02B2:  BCF    03.5
02B3:  CALL   017
....................       fncEscribe('L');  
02B4:  MOVLW  4C
02B5:  BSF    03.5
02B6:  MOVWF  6D
02B7:  BCF    03.5
02B8:  CALL   017
....................       fncEscribe('I');  
02B9:  MOVLW  49
02BA:  BSF    03.5
02BB:  MOVWF  6D
02BC:  BCF    03.5
02BD:  CALL   017
....................       fncEscribe('C');  
02BE:  MOVLW  43
02BF:  BSF    03.5
02C0:  MOVWF  6D
02C1:  BCF    03.5
02C2:  CALL   017
....................       fncEscribe('I');  
02C3:  MOVLW  49
02C4:  BSF    03.5
02C5:  MOVWF  6D
02C6:  BCF    03.5
02C7:  CALL   017
....................       fncEscribe('D');  
02C8:  MOVLW  44
02C9:  BSF    03.5
02CA:  MOVWF  6D
02CB:  BCF    03.5
02CC:  CALL   017
....................       fncEscribe('A');  
02CD:  MOVLW  41
02CE:  BSF    03.5
02CF:  MOVWF  6D
02D0:  BCF    03.5
02D1:  CALL   017
....................       fncEscribe('D');  
02D2:  MOVLW  44
02D3:  BSF    03.5
02D4:  MOVWF  6D
02D5:  BCF    03.5
02D6:  CALL   017
....................       fncEscribe(' ');  
02D7:  MOVLW  20
02D8:  BSF    03.5
02D9:  MOVWF  6D
02DA:  BCF    03.5
02DB:  CALL   017
.................... //5.-  
....................       fncEscribe('C');  
02DC:  MOVLW  43
02DD:  BSF    03.5
02DE:  MOVWF  6D
02DF:  BCF    03.5
02E0:  CALL   017
....................       fncEscribe('O');  
02E1:  MOVLW  4F
02E2:  BSF    03.5
02E3:  MOVWF  6D
02E4:  BCF    03.5
02E5:  CALL   017
....................       fncEscribe('M');  
02E6:  MOVLW  4D
02E7:  BSF    03.5
02E8:  MOVWF  6D
02E9:  BCF    03.5
02EA:  CALL   017
....................       fncEscribe('U');  
02EB:  MOVLW  55
02EC:  BSF    03.5
02ED:  MOVWF  6D
02EE:  BCF    03.5
02EF:  CALL   017
....................       fncEscribe('N');  
02F0:  MOVLW  4E
02F1:  BSF    03.5
02F2:  MOVWF  6D
02F3:  BCF    03.5
02F4:  CALL   017
....................       fncEscribe('I');  
02F5:  MOVLW  49
02F6:  BSF    03.5
02F7:  MOVWF  6D
02F8:  BCF    03.5
02F9:  CALL   017
....................       fncEscribe('C');  
02FA:  MOVLW  43
02FB:  BSF    03.5
02FC:  MOVWF  6D
02FD:  BCF    03.5
02FE:  CALL   017
....................       fncEscribe('A');  
02FF:  MOVLW  41
0300:  BSF    03.5
0301:  MOVWF  6D
0302:  BCF    03.5
0303:  CALL   017
....................       fncEscribe('C');  
0304:  MOVLW  43
0305:  BSF    03.5
0306:  MOVWF  6D
0307:  BCF    03.5
0308:  CALL   017
....................       fncEscribe('I');  
0309:  MOVLW  49
030A:  BSF    03.5
030B:  MOVWF  6D
030C:  BCF    03.5
030D:  CALL   017
....................       fncEscribe('O');  
030E:  MOVLW  4F
030F:  BSF    03.5
0310:  MOVWF  6D
0311:  BCF    03.5
0312:  CALL   017
....................       fncEscribe('N');  
0313:  MOVLW  4E
0314:  BSF    03.5
0315:  MOVWF  6D
0316:  BCF    03.5
0317:  CALL   017
....................     }  
.................... //========================= Muestra cinco apellidos con la inicial Q =========================//  
....................     else if(strcmp(c3,str)== 0){  
0318:  GOTO   7F9
0319:  MOVLW  59
031A:  BSF    03.5
031B:  MOVWF  6A
031C:  BCF    03.5
031D:  MOVF   41,W
031E:  BSF    03.5
031F:  MOVWF  6B
0320:  BCF    03.5
0321:  CALL   059
0322:  MOVF   78,F
0323:  BTFSS  03.2
0324:  GOTO   407
.................... //1.-  
....................       fncEscribe('Q');  
0325:  MOVLW  51
0326:  BSF    03.5
0327:  MOVWF  6D
0328:  BCF    03.5
0329:  CALL   017
....................       fncEscribe('U');  
032A:  MOVLW  55
032B:  BSF    03.5
032C:  MOVWF  6D
032D:  BCF    03.5
032E:  CALL   017
....................       fncEscribe('I');  
032F:  MOVLW  49
0330:  BSF    03.5
0331:  MOVWF  6D
0332:  BCF    03.5
0333:  CALL   017
....................       fncEscribe('N');  
0334:  MOVLW  4E
0335:  BSF    03.5
0336:  MOVWF  6D
0337:  BCF    03.5
0338:  CALL   017
....................       fncEscribe('T');  
0339:  MOVLW  54
033A:  BSF    03.5
033B:  MOVWF  6D
033C:  BCF    03.5
033D:  CALL   017
....................       fncEscribe('A');  
033E:  MOVLW  41
033F:  BSF    03.5
0340:  MOVWF  6D
0341:  BCF    03.5
0342:  CALL   017
....................       fncEscribe('N');  
0343:  MOVLW  4E
0344:  BSF    03.5
0345:  MOVWF  6D
0346:  BCF    03.5
0347:  CALL   017
....................       fncEscribe('A');  
0348:  MOVLW  41
0349:  BSF    03.5
034A:  MOVWF  6D
034B:  BCF    03.5
034C:  CALL   017
....................       fncEscribe(' ');  
034D:  MOVLW  20
034E:  BSF    03.5
034F:  MOVWF  6D
0350:  BCF    03.5
0351:  CALL   017
.................... //2.-  
....................       fncEscribe('Q');  
0352:  MOVLW  51
0353:  BSF    03.5
0354:  MOVWF  6D
0355:  BCF    03.5
0356:  CALL   017
....................       fncEscribe('U');  
0357:  MOVLW  55
0358:  BSF    03.5
0359:  MOVWF  6D
035A:  BCF    03.5
035B:  CALL   017
....................       fncEscribe('E');  
035C:  MOVLW  45
035D:  BSF    03.5
035E:  MOVWF  6D
035F:  BCF    03.5
0360:  CALL   017
....................       fncEscribe('S');  
0361:  MOVLW  53
0362:  BSF    03.5
0363:  MOVWF  6D
0364:  BCF    03.5
0365:  CALL   017
....................       fncEscribe('A');  
0366:  MOVLW  41
0367:  BSF    03.5
0368:  MOVWF  6D
0369:  BCF    03.5
036A:  CALL   017
....................       fncEscribe('D');  
036B:  MOVLW  44
036C:  BSF    03.5
036D:  MOVWF  6D
036E:  BCF    03.5
036F:  CALL   017
....................       fncEscribe('A');  
0370:  MOVLW  41
0371:  BSF    03.5
0372:  MOVWF  6D
0373:  BCF    03.5
0374:  CALL   017
....................       fncEscribe(' ');  
0375:  MOVLW  20
0376:  BSF    03.5
0377:  MOVWF  6D
0378:  BCF    03.5
0379:  CALL   017
.................... //3.-  
....................       fncEscribe('Q');  
037A:  MOVLW  51
037B:  BSF    03.5
037C:  MOVWF  6D
037D:  BCF    03.5
037E:  CALL   017
....................       fncEscribe('U');  
037F:  MOVLW  55
0380:  BSF    03.5
0381:  MOVWF  6D
0382:  BCF    03.5
0383:  CALL   017
....................       fncEscribe('I');  
0384:  MOVLW  49
0385:  BSF    03.5
0386:  MOVWF  6D
0387:  BCF    03.5
0388:  CALL   017
....................       fncEscribe('N');  
0389:  MOVLW  4E
038A:  BSF    03.5
038B:  MOVWF  6D
038C:  BCF    03.5
038D:  CALL   017
....................       fncEscribe('T');  
038E:  MOVLW  54
038F:  BSF    03.5
0390:  MOVWF  6D
0391:  BCF    03.5
0392:  CALL   017
....................       fncEscribe('E');  
0393:  MOVLW  45
0394:  BSF    03.5
0395:  MOVWF  6D
0396:  BCF    03.5
0397:  CALL   017
....................       fncEscribe('R');  
0398:  MOVLW  52
0399:  BSF    03.5
039A:  MOVWF  6D
039B:  BCF    03.5
039C:  CALL   017
....................       fncEscribe('O');  
039D:  MOVLW  4F
039E:  BSF    03.5
039F:  MOVWF  6D
03A0:  BCF    03.5
03A1:  CALL   017
....................       fncEscribe(' ');  
03A2:  MOVLW  20
03A3:  BSF    03.5
03A4:  MOVWF  6D
03A5:  BCF    03.5
03A6:  CALL   017
.................... //4.-  
....................       fncEscribe('Q');  
03A7:  MOVLW  51
03A8:  BSF    03.5
03A9:  MOVWF  6D
03AA:  BCF    03.5
03AB:  CALL   017
....................       fncEscribe('U');  
03AC:  MOVLW  55
03AD:  BSF    03.5
03AE:  MOVWF  6D
03AF:  BCF    03.5
03B0:  CALL   017
....................       fncEscribe('I');  
03B1:  MOVLW  49
03B2:  BSF    03.5
03B3:  MOVWF  6D
03B4:  BCF    03.5
03B5:  CALL   017
....................       fncEscribe('R');  
03B6:  MOVLW  52
03B7:  BSF    03.5
03B8:  MOVWF  6D
03B9:  BCF    03.5
03BA:  CALL   017
....................       fncEscribe('O');  
03BB:  MOVLW  4F
03BC:  BSF    03.5
03BD:  MOVWF  6D
03BE:  BCF    03.5
03BF:  CALL   017
....................       fncEscribe('G');  
03C0:  MOVLW  47
03C1:  BSF    03.5
03C2:  MOVWF  6D
03C3:  BCF    03.5
03C4:  CALL   017
....................       fncEscribe('A');  
03C5:  MOVLW  41
03C6:  BSF    03.5
03C7:  MOVWF  6D
03C8:  BCF    03.5
03C9:  CALL   017
....................       fncEscribe(' ');  
03CA:  MOVLW  20
03CB:  BSF    03.5
03CC:  MOVWF  6D
03CD:  BCF    03.5
03CE:  CALL   017
.................... //5.-  
....................       fncEscribe('Q');  
03CF:  MOVLW  51
03D0:  BSF    03.5
03D1:  MOVWF  6D
03D2:  BCF    03.5
03D3:  CALL   017
....................       fncEscribe('U');  
03D4:  MOVLW  55
03D5:  BSF    03.5
03D6:  MOVWF  6D
03D7:  BCF    03.5
03D8:  CALL   017
....................       fncEscribe('I');  
03D9:  MOVLW  49
03DA:  BSF    03.5
03DB:  MOVWF  6D
03DC:  BCF    03.5
03DD:  CALL   017
....................       fncEscribe('N');  
03DE:  MOVLW  4E
03DF:  BSF    03.5
03E0:  MOVWF  6D
03E1:  BCF    03.5
03E2:  CALL   017
....................       fncEscribe('T');  
03E3:  MOVLW  54
03E4:  BSF    03.5
03E5:  MOVWF  6D
03E6:  BCF    03.5
03E7:  CALL   017
....................       fncEscribe('A');  
03E8:  MOVLW  41
03E9:  BSF    03.5
03EA:  MOVWF  6D
03EB:  BCF    03.5
03EC:  CALL   017
....................       fncEscribe('N');  
03ED:  MOVLW  4E
03EE:  BSF    03.5
03EF:  MOVWF  6D
03F0:  BCF    03.5
03F1:  CALL   017
....................       fncEscribe('I');  
03F2:  MOVLW  49
03F3:  BSF    03.5
03F4:  MOVWF  6D
03F5:  BCF    03.5
03F6:  CALL   017
....................       fncEscribe('L');  
03F7:  MOVLW  4C
03F8:  BSF    03.5
03F9:  MOVWF  6D
03FA:  BCF    03.5
03FB:  CALL   017
....................       fncEscribe('L');  
03FC:  MOVLW  4C
03FD:  BSF    03.5
03FE:  MOVWF  6D
03FF:  BCF    03.5
0400:  CALL   017
....................       fncEscribe('A');  
0401:  MOVLW  41
0402:  BSF    03.5
0403:  MOVWF  6D
0404:  BCF    03.5
0405:  CALL   017
....................     }  
.................... //$$$$$$$$$$$$$$$$$$$$$$$$ Muestra cinco lenguas habladas en Senegal $$$$$$$$$$$$$$$$$$$$$$$$$//  
....................     else if(strcmp(c4,str)== 0){  
0406:  GOTO   7F9
0407:  MOVLW  65
0408:  BSF    03.5
0409:  MOVWF  6A
040A:  BCF    03.5
040B:  MOVF   41,W
040C:  BSF    03.5
040D:  MOVWF  6B
040E:  BCF    03.5
040F:  CALL   059
0410:  MOVF   78,F
0411:  BTFSS  03.2
0412:  GOTO   4BE
.................... //1.-  
....................       fncEscribe('F');  
0413:  MOVLW  46
0414:  BSF    03.5
0415:  MOVWF  6D
0416:  BCF    03.5
0417:  CALL   017
....................       fncEscribe('R');  
0418:  MOVLW  52
0419:  BSF    03.5
041A:  MOVWF  6D
041B:  BCF    03.5
041C:  CALL   017
....................       fncEscribe('A');  
041D:  MOVLW  41
041E:  BSF    03.5
041F:  MOVWF  6D
0420:  BCF    03.5
0421:  CALL   017
....................       fncEscribe('N');  
0422:  MOVLW  4E
0423:  BSF    03.5
0424:  MOVWF  6D
0425:  BCF    03.5
0426:  CALL   017
....................       fncEscribe('C');  
0427:  MOVLW  43
0428:  BSF    03.5
0429:  MOVWF  6D
042A:  BCF    03.5
042B:  CALL   017
....................       fncEscribe('E');  
042C:  MOVLW  45
042D:  BSF    03.5
042E:  MOVWF  6D
042F:  BCF    03.5
0430:  CALL   017
....................       fncEscribe('S');  
0431:  MOVLW  53
0432:  BSF    03.5
0433:  MOVWF  6D
0434:  BCF    03.5
0435:  CALL   017
....................       fncEscribe(' ');  
0436:  MOVLW  20
0437:  BSF    03.5
0438:  MOVWF  6D
0439:  BCF    03.5
043A:  CALL   017
.................... //2.-  
....................       fncEscribe('W');  
043B:  MOVLW  57
043C:  BSF    03.5
043D:  MOVWF  6D
043E:  BCF    03.5
043F:  CALL   017
....................       fncEscribe('O');  
0440:  MOVLW  4F
0441:  BSF    03.5
0442:  MOVWF  6D
0443:  BCF    03.5
0444:  CALL   017
....................       fncEscribe('L');  
0445:  MOVLW  4C
0446:  BSF    03.5
0447:  MOVWF  6D
0448:  BCF    03.5
0449:  CALL   017
....................       fncEscribe('O');  
044A:  MOVLW  4F
044B:  BSF    03.5
044C:  MOVWF  6D
044D:  BCF    03.5
044E:  CALL   017
....................       fncEscribe('F');  
044F:  MOVLW  46
0450:  BSF    03.5
0451:  MOVWF  6D
0452:  BCF    03.5
0453:  CALL   017
....................       fncEscribe(' ');  
0454:  MOVLW  20
0455:  BSF    03.5
0456:  MOVWF  6D
0457:  BCF    03.5
0458:  CALL   017
.................... //3.-  
....................       fncEscribe('M');  
0459:  MOVLW  4D
045A:  BSF    03.5
045B:  MOVWF  6D
045C:  BCF    03.5
045D:  CALL   017
....................       fncEscribe('A');  
045E:  MOVLW  41
045F:  BSF    03.5
0460:  MOVWF  6D
0461:  BCF    03.5
0462:  CALL   017
....................       fncEscribe('N');  
0463:  MOVLW  4E
0464:  BSF    03.5
0465:  MOVWF  6D
0466:  BCF    03.5
0467:  CALL   017
....................       fncEscribe('D');  
0468:  MOVLW  44
0469:  BSF    03.5
046A:  MOVWF  6D
046B:  BCF    03.5
046C:  CALL   017
....................       fncEscribe('E');  
046D:  MOVLW  45
046E:  BSF    03.5
046F:  MOVWF  6D
0470:  BCF    03.5
0471:  CALL   017
....................       fncEscribe(' ');  
0472:  MOVLW  20
0473:  BSF    03.5
0474:  MOVWF  6D
0475:  BCF    03.5
0476:  CALL   017
.................... //4.-  
....................       fncEscribe('P');  
0477:  MOVLW  50
0478:  BSF    03.5
0479:  MOVWF  6D
047A:  BCF    03.5
047B:  CALL   017
....................       fncEscribe('E');  
047C:  MOVLW  45
047D:  BSF    03.5
047E:  MOVWF  6D
047F:  BCF    03.5
0480:  CALL   017
....................       fncEscribe('U');  
0481:  MOVLW  55
0482:  BSF    03.5
0483:  MOVWF  6D
0484:  BCF    03.5
0485:  CALL   017
....................       fncEscribe('L');  
0486:  MOVLW  4C
0487:  BSF    03.5
0488:  MOVWF  6D
0489:  BCF    03.5
048A:  CALL   017
....................       fncEscribe('H');  
048B:  MOVLW  48
048C:  BSF    03.5
048D:  MOVWF  6D
048E:  BCF    03.5
048F:  CALL   017
....................       fncEscribe(' ');  
0490:  MOVLW  20
0491:  BSF    03.5
0492:  MOVWF  6D
0493:  BCF    03.5
0494:  CALL   017
.................... //5.-  
....................       fncEscribe('H');  
0495:  MOVLW  48
0496:  BSF    03.5
0497:  MOVWF  6D
0498:  BCF    03.5
0499:  CALL   017
....................       fncEscribe('A');  
049A:  MOVLW  41
049B:  BSF    03.5
049C:  MOVWF  6D
049D:  BCF    03.5
049E:  CALL   017
....................       fncEscribe('S');  
049F:  MOVLW  53
04A0:  BSF    03.5
04A1:  MOVWF  6D
04A2:  BCF    03.5
04A3:  CALL   017
....................       fncEscribe('S');  
04A4:  MOVLW  53
04A5:  BSF    03.5
04A6:  MOVWF  6D
04A7:  BCF    03.5
04A8:  CALL   017
....................       fncEscribe('A');  
04A9:  MOVLW  41
04AA:  BSF    03.5
04AB:  MOVWF  6D
04AC:  BCF    03.5
04AD:  CALL   017
....................       fncEscribe('N');  
04AE:  MOVLW  4E
04AF:  BSF    03.5
04B0:  MOVWF  6D
04B1:  BCF    03.5
04B2:  CALL   017
....................       fncEscribe('I');  
04B3:  MOVLW  49
04B4:  BSF    03.5
04B5:  MOVWF  6D
04B6:  BCF    03.5
04B7:  CALL   017
....................       fncEscribe('A');  
04B8:  MOVLW  41
04B9:  BSF    03.5
04BA:  MOVWF  6D
04BB:  BCF    03.5
04BC:  CALL   017
....................     }  
.................... //||||||||||||||| Muestra seis nombres de hombres que inicien con la letra “J” |||||||||||||||//  
....................     else if(strcmp(c5,str)== 0){  
04BD:  GOTO   7F9
04BE:  MOVLW  A0
04BF:  BSF    03.5
04C0:  MOVWF  6A
04C1:  BCF    03.5
04C2:  MOVF   41,W
04C3:  BSF    03.5
04C4:  MOVWF  6B
04C5:  BCF    03.5
04C6:  CALL   059
04C7:  MOVF   78,F
04C8:  BTFSS  03.2
04C9:  GOTO   58E
.................... //1.-  
....................       fncEscribe('J');  
04CA:  MOVLW  4A
04CB:  BSF    03.5
04CC:  MOVWF  6D
04CD:  BCF    03.5
04CE:  CALL   017
....................       fncEscribe('A');  
04CF:  MOVLW  41
04D0:  BSF    03.5
04D1:  MOVWF  6D
04D2:  BCF    03.5
04D3:  CALL   017
....................       fncEscribe('C');  
04D4:  MOVLW  43
04D5:  BSF    03.5
04D6:  MOVWF  6D
04D7:  BCF    03.5
04D8:  CALL   017
....................       fncEscribe('I');  
04D9:  MOVLW  49
04DA:  BSF    03.5
04DB:  MOVWF  6D
04DC:  BCF    03.5
04DD:  CALL   017
....................       fncEscribe('N');  
04DE:  MOVLW  4E
04DF:  BSF    03.5
04E0:  MOVWF  6D
04E1:  BCF    03.5
04E2:  CALL   017
....................       fncEscribe('T');  
04E3:  MOVLW  54
04E4:  BSF    03.5
04E5:  MOVWF  6D
04E6:  BCF    03.5
04E7:  CALL   017
....................       fncEscribe('O');  
04E8:  MOVLW  4F
04E9:  BSF    03.5
04EA:  MOVWF  6D
04EB:  BCF    03.5
04EC:  CALL   017
....................       fncEscribe(' ');  
04ED:  MOVLW  20
04EE:  BSF    03.5
04EF:  MOVWF  6D
04F0:  BCF    03.5
04F1:  CALL   017
.................... //2.-  
....................       fncEscribe('J');  
04F2:  MOVLW  4A
04F3:  BSF    03.5
04F4:  MOVWF  6D
04F5:  BCF    03.5
04F6:  CALL   017
....................       fncEscribe('A');  
04F7:  MOVLW  41
04F8:  BSF    03.5
04F9:  MOVWF  6D
04FA:  BCF    03.5
04FB:  CALL   017
....................       fncEscribe('C');  
04FC:  MOVLW  43
04FD:  BSF    03.5
04FE:  MOVWF  6D
04FF:  BCF    03.5
0500:  CALL   017
....................       fncEscribe('O');  
0501:  MOVLW  4F
0502:  BSF    03.5
0503:  MOVWF  6D
0504:  BCF    03.5
0505:  CALL   017
....................       fncEscribe('B');  
0506:  MOVLW  42
0507:  BSF    03.5
0508:  MOVWF  6D
0509:  BCF    03.5
050A:  CALL   017
....................       fncEscribe('O');  
050B:  MOVLW  4F
050C:  BSF    03.5
050D:  MOVWF  6D
050E:  BCF    03.5
050F:  CALL   017
....................       fncEscribe(' ');  
0510:  MOVLW  20
0511:  BSF    03.5
0512:  MOVWF  6D
0513:  BCF    03.5
0514:  CALL   017
.................... //3.-  
....................       fncEscribe('J');  
0515:  MOVLW  4A
0516:  BSF    03.5
0517:  MOVWF  6D
0518:  BCF    03.5
0519:  CALL   017
....................       fncEscribe('A');  
051A:  MOVLW  41
051B:  BSF    03.5
051C:  MOVWF  6D
051D:  BCF    03.5
051E:  CALL   017
....................       fncEscribe('I');  
051F:  MOVLW  49
0520:  BSF    03.5
0521:  MOVWF  6D
0522:  BCF    03.5
0523:  CALL   017
....................       fncEscribe('R');  
0524:  MOVLW  52
0525:  BSF    03.5
0526:  MOVWF  6D
0527:  BCF    03.5
0528:  CALL   017
....................       fncEscribe('O');  
0529:  MOVLW  4F
052A:  BSF    03.5
052B:  MOVWF  6D
052C:  BCF    03.5
052D:  CALL   017
....................       fncEscribe(' ');  
052E:  MOVLW  20
052F:  BSF    03.5
0530:  MOVWF  6D
0531:  BCF    03.5
0532:  CALL   017
.................... //4.-  
....................       fncEscribe('J');  
0533:  MOVLW  4A
0534:  BSF    03.5
0535:  MOVWF  6D
0536:  BCF    03.5
0537:  CALL   017
....................       fncEscribe('A');  
0538:  MOVLW  41
0539:  BSF    03.5
053A:  MOVWF  6D
053B:  BCF    03.5
053C:  CALL   017
....................       fncEscribe('V');  
053D:  MOVLW  56
053E:  BSF    03.5
053F:  MOVWF  6D
0540:  BCF    03.5
0541:  CALL   017
....................       fncEscribe('I');  
0542:  MOVLW  49
0543:  BSF    03.5
0544:  MOVWF  6D
0545:  BCF    03.5
0546:  CALL   017
....................       fncEscribe('E');  
0547:  MOVLW  45
0548:  BSF    03.5
0549:  MOVWF  6D
054A:  BCF    03.5
054B:  CALL   017
....................       fncEscribe('R');  
054C:  MOVLW  52
054D:  BSF    03.5
054E:  MOVWF  6D
054F:  BCF    03.5
0550:  CALL   017
....................       fncEscribe(' ');  
0551:  MOVLW  20
0552:  BSF    03.5
0553:  MOVWF  6D
0554:  BCF    03.5
0555:  CALL   017
.................... //5.-  
....................       fncEscribe('J');  
0556:  MOVLW  4A
0557:  BSF    03.5
0558:  MOVWF  6D
0559:  BCF    03.5
055A:  CALL   017
....................       fncEscribe('A');  
055B:  MOVLW  41
055C:  BSF    03.5
055D:  MOVWF  6D
055E:  BCF    03.5
055F:  CALL   017
....................       fncEscribe('I');  
0560:  MOVLW  49
0561:  BSF    03.5
0562:  MOVWF  6D
0563:  BCF    03.5
0564:  CALL   017
....................       fncEscribe('M');  
0565:  MOVLW  4D
0566:  BSF    03.5
0567:  MOVWF  6D
0568:  BCF    03.5
0569:  CALL   017
....................       fncEscribe('E');  
056A:  MOVLW  45
056B:  BSF    03.5
056C:  MOVWF  6D
056D:  BCF    03.5
056E:  CALL   017
....................       fncEscribe(' ');  
056F:  MOVLW  20
0570:  BSF    03.5
0571:  MOVWF  6D
0572:  BCF    03.5
0573:  CALL   017
.................... //6.-  
....................       fncEscribe('J');  
0574:  MOVLW  4A
0575:  BSF    03.5
0576:  MOVWF  6D
0577:  BCF    03.5
0578:  CALL   017
....................       fncEscribe('E');  
0579:  MOVLW  45
057A:  BSF    03.5
057B:  MOVWF  6D
057C:  BCF    03.5
057D:  CALL   017
....................       fncEscribe('S');  
057E:  MOVLW  53
057F:  BSF    03.5
0580:  MOVWF  6D
0581:  BCF    03.5
0582:  CALL   017
....................       fncEscribe('U');  
0583:  MOVLW  55
0584:  BSF    03.5
0585:  MOVWF  6D
0586:  BCF    03.5
0587:  CALL   017
....................       fncEscribe('S');  
0588:  MOVLW  53
0589:  BSF    03.5
058A:  MOVWF  6D
058B:  BCF    03.5
058C:  CALL   017
....................     }  
.................... //~~~~~~~~~~~~~~~~~~~~~~~ Muestra cinco lenguas habladas en Bangladés ~~~~~~~~~~~~~~~~~~~~~~~~//  
....................     else if(strcmp(c6,str)== 0){  
058D:  GOTO   7F9
058E:  MOVLW  AB
058F:  BSF    03.5
0590:  MOVWF  6A
0591:  BCF    03.5
0592:  MOVF   41,W
0593:  BSF    03.5
0594:  MOVWF  6B
0595:  BCF    03.5
0596:  CALL   059
0597:  MOVF   78,F
0598:  BTFSS  03.2
0599:  GOTO   640
.................... //1.-  
....................       fncEscribe('H');  
059A:  MOVLW  48
059B:  BSF    03.5
059C:  MOVWF  6D
059D:  BCF    03.5
059E:  CALL   017
....................       fncEscribe('I');  
059F:  MOVLW  49
05A0:  BSF    03.5
05A1:  MOVWF  6D
05A2:  BCF    03.5
05A3:  CALL   017
....................       fncEscribe('N');  
05A4:  MOVLW  4E
05A5:  BSF    03.5
05A6:  MOVWF  6D
05A7:  BCF    03.5
05A8:  CALL   017
....................       fncEscribe('D');  
05A9:  MOVLW  44
05AA:  BSF    03.5
05AB:  MOVWF  6D
05AC:  BCF    03.5
05AD:  CALL   017
....................       fncEscribe('I');  
05AE:  MOVLW  49
05AF:  BSF    03.5
05B0:  MOVWF  6D
05B1:  BCF    03.5
05B2:  CALL   017
....................       fncEscribe(' ');  
05B3:  MOVLW  20
05B4:  BSF    03.5
05B5:  MOVWF  6D
05B6:  BCF    03.5
05B7:  CALL   017
.................... //2.-  
....................       fncEscribe('B');  
05B8:  MOVLW  42
05B9:  BSF    03.5
05BA:  MOVWF  6D
05BB:  BCF    03.5
05BC:  CALL   017
....................       fncEscribe('E');  
05BD:  MOVLW  45
05BE:  BSF    03.5
05BF:  MOVWF  6D
05C0:  BCF    03.5
05C1:  CALL   017
....................       fncEscribe('N');  
05C2:  MOVLW  4E
05C3:  BSF    03.5
05C4:  MOVWF  6D
05C5:  BCF    03.5
05C6:  CALL   017
....................       fncEscribe('G');  
05C7:  MOVLW  47
05C8:  BSF    03.5
05C9:  MOVWF  6D
05CA:  BCF    03.5
05CB:  CALL   017
....................       fncEscribe('A');  
05CC:  MOVLW  41
05CD:  BSF    03.5
05CE:  MOVWF  6D
05CF:  BCF    03.5
05D0:  CALL   017
....................       fncEscribe('L');  
05D1:  MOVLW  4C
05D2:  BSF    03.5
05D3:  MOVWF  6D
05D4:  BCF    03.5
05D5:  CALL   017
....................       fncEscribe('I');  
05D6:  MOVLW  49
05D7:  BSF    03.5
05D8:  MOVWF  6D
05D9:  BCF    03.5
05DA:  CALL   017
....................       fncEscribe(' ');  
05DB:  MOVLW  20
05DC:  BSF    03.5
05DD:  MOVWF  6D
05DE:  BCF    03.5
05DF:  CALL   017
.................... //3.-  
....................       fncEscribe('T');  
05E0:  MOVLW  54
05E1:  BSF    03.5
05E2:  MOVWF  6D
05E3:  BCF    03.5
05E4:  CALL   017
....................       fncEscribe('E');  
05E5:  MOVLW  45
05E6:  BSF    03.5
05E7:  MOVWF  6D
05E8:  BCF    03.5
05E9:  CALL   017
....................       fncEscribe('L');  
05EA:  MOVLW  4C
05EB:  BSF    03.5
05EC:  MOVWF  6D
05ED:  BCF    03.5
05EE:  CALL   017
....................       fncEscribe('U');  
05EF:  MOVLW  55
05F0:  BSF    03.5
05F1:  MOVWF  6D
05F2:  BCF    03.5
05F3:  CALL   017
....................       fncEscribe('G');  
05F4:  MOVLW  47
05F5:  BSF    03.5
05F6:  MOVWF  6D
05F7:  BCF    03.5
05F8:  CALL   017
....................       fncEscribe('U');  
05F9:  MOVLW  55
05FA:  BSF    03.5
05FB:  MOVWF  6D
05FC:  BCF    03.5
05FD:  CALL   017
....................       fncEscribe(' ');  
05FE:  MOVLW  20
05FF:  BSF    03.5
0600:  MOVWF  6D
0601:  BCF    03.5
0602:  CALL   017
.................... //4.-  
....................       fncEscribe('M');  
0603:  MOVLW  4D
0604:  BSF    03.5
0605:  MOVWF  6D
0606:  BCF    03.5
0607:  CALL   017
....................       fncEscribe('A');  
0608:  MOVLW  41
0609:  BSF    03.5
060A:  MOVWF  6D
060B:  BCF    03.5
060C:  CALL   017
....................       fncEscribe('R');  
060D:  MOVLW  52
060E:  BSF    03.5
060F:  MOVWF  6D
0610:  BCF    03.5
0611:  CALL   017
....................       fncEscribe('A');  
0612:  MOVLW  41
0613:  BSF    03.5
0614:  MOVWF  6D
0615:  BCF    03.5
0616:  CALL   017
....................       fncEscribe('T');  
0617:  MOVLW  54
0618:  BSF    03.5
0619:  MOVWF  6D
061A:  BCF    03.5
061B:  CALL   017
....................       fncEscribe('I');  
061C:  MOVLW  49
061D:  BSF    03.5
061E:  MOVWF  6D
061F:  BCF    03.5
0620:  CALL   017
....................       fncEscribe(' ');  
0621:  MOVLW  20
0622:  BSF    03.5
0623:  MOVWF  6D
0624:  BCF    03.5
0625:  CALL   017
.................... //5.-  
....................       fncEscribe('T');  
0626:  MOVLW  54
0627:  BSF    03.5
0628:  MOVWF  6D
0629:  BCF    03.5
062A:  CALL   017
....................       fncEscribe('A');  
062B:  MOVLW  41
062C:  BSF    03.5
062D:  MOVWF  6D
062E:  BCF    03.5
062F:  CALL   017
....................       fncEscribe('M');  
0630:  MOVLW  4D
0631:  BSF    03.5
0632:  MOVWF  6D
0633:  BCF    03.5
0634:  CALL   017
....................       fncEscribe('I');  
0635:  MOVLW  49
0636:  BSF    03.5
0637:  MOVWF  6D
0638:  BCF    03.5
0639:  CALL   017
....................       fncEscribe('L');  
063A:  MOVLW  4C
063B:  BSF    03.5
063C:  MOVWF  6D
063D:  BCF    03.5
063E:  CALL   017
....................     }  
.................... //;;;;;;;;;;;;;;; Muestra los seis mejores equipos de fútbol soccer en México ;;;;;;;;;;;;;;;;//  
....................     else if(strcmp(c7,str)== 0){  
063F:  GOTO   7F9
0640:  MOVLW  B7
0641:  BSF    03.5
0642:  MOVWF  6A
0643:  BCF    03.5
0644:  MOVF   41,W
0645:  BSF    03.5
0646:  MOVWF  6B
0647:  BCF    03.5
0648:  CALL   059
0649:  MOVF   78,F
064A:  BTFSS  03.2
064B:  GOTO   738
.................... //1.-  
....................       fncEscribe('M');  
064C:  MOVLW  4D
064D:  BSF    03.5
064E:  MOVWF  6D
064F:  BCF    03.5
0650:  CALL   017
....................       fncEscribe('O');  
0651:  MOVLW  4F
0652:  BSF    03.5
0653:  MOVWF  6D
0654:  BCF    03.5
0655:  CALL   017
....................       fncEscribe('N');  
0656:  MOVLW  4E
0657:  BSF    03.5
0658:  MOVWF  6D
0659:  BCF    03.5
065A:  CALL   017
....................       fncEscribe('T');  
065B:  MOVLW  54
065C:  BSF    03.5
065D:  MOVWF  6D
065E:  BCF    03.5
065F:  CALL   017
....................       fncEscribe('E');  
0660:  MOVLW  45
0661:  BSF    03.5
0662:  MOVWF  6D
0663:  BCF    03.5
0664:  CALL   017
....................       fncEscribe('R');  
0665:  MOVLW  52
0666:  BSF    03.5
0667:  MOVWF  6D
0668:  BCF    03.5
0669:  CALL   017
....................       fncEscribe('R');  
066A:  MOVLW  52
066B:  BSF    03.5
066C:  MOVWF  6D
066D:  BCF    03.5
066E:  CALL   017
....................       fncEscribe('E');  
066F:  MOVLW  45
0670:  BSF    03.5
0671:  MOVWF  6D
0672:  BCF    03.5
0673:  CALL   017
....................       fncEscribe('Y');  
0674:  MOVLW  59
0675:  BSF    03.5
0676:  MOVWF  6D
0677:  BCF    03.5
0678:  CALL   017
....................       fncEscribe(' ');  
0679:  MOVLW  20
067A:  BSF    03.5
067B:  MOVWF  6D
067C:  BCF    03.5
067D:  CALL   017
.................... //2.-  
....................       fncEscribe('T');  
067E:  MOVLW  54
067F:  BSF    03.5
0680:  MOVWF  6D
0681:  BCF    03.5
0682:  CALL   017
....................       fncEscribe('I');  
0683:  MOVLW  49
0684:  BSF    03.5
0685:  MOVWF  6D
0686:  BCF    03.5
0687:  CALL   017
....................       fncEscribe('G');  
0688:  MOVLW  47
0689:  BSF    03.5
068A:  MOVWF  6D
068B:  BCF    03.5
068C:  CALL   017
....................       fncEscribe('R');  
068D:  MOVLW  52
068E:  BSF    03.5
068F:  MOVWF  6D
0690:  BCF    03.5
0691:  CALL   017
....................       fncEscribe('E');  
0692:  MOVLW  45
0693:  BSF    03.5
0694:  MOVWF  6D
0695:  BCF    03.5
0696:  CALL   017
....................       fncEscribe('S');  
0697:  MOVLW  53
0698:  BSF    03.5
0699:  MOVWF  6D
069A:  BCF    03.5
069B:  CALL   017
....................       fncEscribe(' ');  
069C:  MOVLW  20
069D:  BSF    03.5
069E:  MOVWF  6D
069F:  BCF    03.5
06A0:  CALL   017
.................... //3.-  
....................       fncEscribe('A');  
06A1:  MOVLW  41
06A2:  BSF    03.5
06A3:  MOVWF  6D
06A4:  BCF    03.5
06A5:  CALL   017
....................       fncEscribe('M');  
06A6:  MOVLW  4D
06A7:  BSF    03.5
06A8:  MOVWF  6D
06A9:  BCF    03.5
06AA:  CALL   017
....................       fncEscribe('E');  
06AB:  MOVLW  45
06AC:  BSF    03.5
06AD:  MOVWF  6D
06AE:  BCF    03.5
06AF:  CALL   017
....................       fncEscribe('R');  
06B0:  MOVLW  52
06B1:  BSF    03.5
06B2:  MOVWF  6D
06B3:  BCF    03.5
06B4:  CALL   017
....................       fncEscribe('I');  
06B5:  MOVLW  49
06B6:  BSF    03.5
06B7:  MOVWF  6D
06B8:  BCF    03.5
06B9:  CALL   017
....................       fncEscribe('C');  
06BA:  MOVLW  43
06BB:  BSF    03.5
06BC:  MOVWF  6D
06BD:  BCF    03.5
06BE:  CALL   017
....................       fncEscribe('A');  
06BF:  MOVLW  41
06C0:  BSF    03.5
06C1:  MOVWF  6D
06C2:  BCF    03.5
06C3:  CALL   017
....................       fncEscribe(' ');  
06C4:  MOVLW  20
06C5:  BSF    03.5
06C6:  MOVWF  6D
06C7:  BCF    03.5
06C8:  CALL   017
.................... //4.-  
....................       fncEscribe('C');  
06C9:  MOVLW  43
06CA:  BSF    03.5
06CB:  MOVWF  6D
06CC:  BCF    03.5
06CD:  CALL   017
....................       fncEscribe('H');  
06CE:  MOVLW  48
06CF:  BSF    03.5
06D0:  MOVWF  6D
06D1:  BCF    03.5
06D2:  CALL   017
....................       fncEscribe('I');  
06D3:  MOVLW  49
06D4:  BSF    03.5
06D5:  MOVWF  6D
06D6:  BCF    03.5
06D7:  CALL   017
....................       fncEscribe('V');  
06D8:  MOVLW  56
06D9:  BSF    03.5
06DA:  MOVWF  6D
06DB:  BCF    03.5
06DC:  CALL   017
....................       fncEscribe('A');  
06DD:  MOVLW  41
06DE:  BSF    03.5
06DF:  MOVWF  6D
06E0:  BCF    03.5
06E1:  CALL   017
....................       fncEscribe('S');  
06E2:  MOVLW  53
06E3:  BSF    03.5
06E4:  MOVWF  6D
06E5:  BCF    03.5
06E6:  CALL   017
....................       fncEscribe(' ');  
06E7:  MOVLW  20
06E8:  BSF    03.5
06E9:  MOVWF  6D
06EA:  BCF    03.5
06EB:  CALL   017
.................... //5.-  
....................       fncEscribe('T');  
06EC:  MOVLW  54
06ED:  BSF    03.5
06EE:  MOVWF  6D
06EF:  BCF    03.5
06F0:  CALL   017
....................       fncEscribe('O');  
06F1:  MOVLW  4F
06F2:  BSF    03.5
06F3:  MOVWF  6D
06F4:  BCF    03.5
06F5:  CALL   017
....................       fncEscribe('L');  
06F6:  MOVLW  4C
06F7:  BSF    03.5
06F8:  MOVWF  6D
06F9:  BCF    03.5
06FA:  CALL   017
....................       fncEscribe('U');  
06FB:  MOVLW  55
06FC:  BSF    03.5
06FD:  MOVWF  6D
06FE:  BCF    03.5
06FF:  CALL   017
....................       fncEscribe('C');  
0700:  MOVLW  43
0701:  BSF    03.5
0702:  MOVWF  6D
0703:  BCF    03.5
0704:  CALL   017
....................       fncEscribe('A');  
0705:  MOVLW  41
0706:  BSF    03.5
0707:  MOVWF  6D
0708:  BCF    03.5
0709:  CALL   017
....................       fncEscribe(' ');   
070A:  MOVLW  20
070B:  BSF    03.5
070C:  MOVWF  6D
070D:  BCF    03.5
070E:  CALL   017
.................... //6.-  
....................       fncEscribe('C');  
070F:  MOVLW  43
0710:  BSF    03.5
0711:  MOVWF  6D
0712:  BCF    03.5
0713:  CALL   017
....................       fncEscribe('R');  
0714:  MOVLW  52
0715:  BSF    03.5
0716:  MOVWF  6D
0717:  BCF    03.5
0718:  CALL   017
....................       fncEscribe('U');  
0719:  MOVLW  55
071A:  BSF    03.5
071B:  MOVWF  6D
071C:  BCF    03.5
071D:  CALL   017
....................       fncEscribe('Z');  
071E:  MOVLW  5A
071F:  BSF    03.5
0720:  MOVWF  6D
0721:  BCF    03.5
0722:  CALL   017
....................       fncEscribe('A');  
0723:  MOVLW  41
0724:  BSF    03.5
0725:  MOVWF  6D
0726:  BCF    03.5
0727:  CALL   017
....................       fncEscribe('Z');  
0728:  MOVLW  5A
0729:  BSF    03.5
072A:  MOVWF  6D
072B:  BCF    03.5
072C:  CALL   017
....................       fncEscribe('U');  
072D:  MOVLW  55
072E:  BSF    03.5
072F:  MOVWF  6D
0730:  BCF    03.5
0731:  CALL   017
....................       fncEscribe('L');  
0732:  MOVLW  4C
0733:  BSF    03.5
0734:  MOVWF  6D
0735:  BCF    03.5
0736:  CALL   017
....................     }  
.................... //:::::::::: Muestra el nombre y dirección de la Escuela Nacional Preparatoria No.5 :::::::::://  
....................     else if(strcmp(c8,str)== 0){  
0737:  GOTO   7F9
0738:  MOVLW  C0
0739:  BSF    03.5
073A:  MOVWF  6A
073B:  BCF    03.5
073C:  MOVF   41,W
073D:  BSF    03.5
073E:  MOVWF  6B
073F:  BCF    03.5
0740:  CALL   059
0741:  MOVF   78,F
0742:  BTFSS  03.2
0743:  GOTO   7A4
....................       char m8[]={"JOSE VASCONCELOS CALZ DEL HUESO"};  
0744:  MOVLW  4A
0745:  BSF    03.5
0746:  MOVWF  4A
0747:  MOVLW  4F
0748:  MOVWF  4B
0749:  MOVLW  53
074A:  MOVWF  4C
074B:  MOVLW  45
074C:  MOVWF  4D
074D:  MOVLW  20
074E:  MOVWF  4E
074F:  MOVLW  56
0750:  MOVWF  4F
0751:  MOVLW  41
0752:  MOVWF  50
0753:  MOVLW  53
0754:  MOVWF  51
0755:  MOVLW  43
0756:  MOVWF  52
0757:  MOVLW  4F
0758:  MOVWF  53
0759:  MOVLW  4E
075A:  MOVWF  54
075B:  MOVLW  43
075C:  MOVWF  55
075D:  MOVLW  45
075E:  MOVWF  56
075F:  MOVLW  4C
0760:  MOVWF  57
0761:  MOVLW  4F
0762:  MOVWF  58
0763:  MOVLW  53
0764:  MOVWF  59
0765:  MOVLW  20
0766:  MOVWF  5A
0767:  MOVLW  43
0768:  MOVWF  5B
0769:  MOVLW  41
076A:  MOVWF  5C
076B:  MOVLW  4C
076C:  MOVWF  5D
076D:  MOVLW  5A
076E:  MOVWF  5E
076F:  MOVLW  20
0770:  MOVWF  5F
0771:  MOVLW  44
0772:  MOVWF  60
0773:  MOVLW  45
0774:  MOVWF  61
0775:  MOVLW  4C
0776:  MOVWF  62
0777:  MOVLW  20
0778:  MOVWF  63
0779:  MOVLW  48
077A:  MOVWF  64
077B:  MOVLW  55
077C:  MOVWF  65
077D:  MOVLW  45
077E:  MOVWF  66
077F:  MOVLW  53
0780:  MOVWF  67
0781:  MOVLW  4F
0782:  MOVWF  68
0783:  CLRF   69
....................       fncCadena(m8);  
0784:  MOVLW  CA
0785:  MOVWF  6A
....................     }  
.................... //______________________________________ MESAJE DE ERROR _____________________________________//  
....................     else{  
*
07A2:  GOTO   7FA
07A3:  BCF    03.5
....................       fncEscribe('N');  
07A4:  MOVLW  4E
07A5:  BSF    03.5
07A6:  MOVWF  6D
07A7:  BCF    03.5
07A8:  CALL   017
....................       fncEscribe('O');  
07A9:  MOVLW  4F
07AA:  BSF    03.5
07AB:  MOVWF  6D
07AC:  BCF    03.5
07AD:  CALL   017
....................       fncEscribe('T');  
07AE:  MOVLW  54
07AF:  BSF    03.5
07B0:  MOVWF  6D
07B1:  BCF    03.5
07B2:  CALL   017
....................       fncEscribe(' ');  
07B3:  MOVLW  20
07B4:  BSF    03.5
07B5:  MOVWF  6D
07B6:  BCF    03.5
07B7:  CALL   017
....................       fncEscribe('V');  
07B8:  MOVLW  56
07B9:  BSF    03.5
07BA:  MOVWF  6D
07BB:  BCF    03.5
07BC:  CALL   017
....................       fncEscribe('A');  
07BD:  MOVLW  41
07BE:  BSF    03.5
07BF:  MOVWF  6D
07C0:  BCF    03.5
07C1:  CALL   017
....................       fncEscribe('L');  
07C2:  MOVLW  4C
07C3:  BSF    03.5
07C4:  MOVWF  6D
07C5:  BCF    03.5
07C6:  CALL   017
....................       fncEscribe('I');  
07C7:  MOVLW  49
07C8:  BSF    03.5
07C9:  MOVWF  6D
07CA:  BCF    03.5
07CB:  CALL   017
....................       fncEscribe('D');  
07CC:  MOVLW  44
07CD:  BSF    03.5
07CE:  MOVWF  6D
07CF:  BCF    03.5
07D0:  CALL   017
....................       fncEscribe(' ');  
07D1:  MOVLW  20
07D2:  BSF    03.5
07D3:  MOVWF  6D
07D4:  BCF    03.5
07D5:  CALL   017
....................       fncEscribe('O');  
07D6:  MOVLW  4F
07D7:  BSF    03.5
07D8:  MOVWF  6D
07D9:  BCF    03.5
07DA:  CALL   017
....................       fncEscribe('P');  
07DB:  MOVLW  50
07DC:  BSF    03.5
07DD:  MOVWF  6D
07DE:  BCF    03.5
07DF:  CALL   017
....................       fncEscribe('T');  
07E0:  MOVLW  54
07E1:  BSF    03.5
07E2:  MOVWF  6D
07E3:  BCF    03.5
07E4:  CALL   017
....................       fncEscribe('I');  
07E5:  MOVLW  49
07E6:  BSF    03.5
07E7:  MOVWF  6D
07E8:  BCF    03.5
07E9:  CALL   017
....................       fncEscribe('O');  
07EA:  MOVLW  4F
07EB:  BSF    03.5
07EC:  MOVWF  6D
07ED:  BCF    03.5
07EE:  CALL   017
....................       fncEscribe('N');  
07EF:  MOVLW  4E
07F0:  BSF    03.5
07F1:  MOVWF  6D
07F2:  BCF    03.5
07F3:  CALL   017
....................       fncEscribe('!');  
07F4:  MOVLW  21
07F5:  BSF    03.5
07F6:  MOVWF  6D
07F7:  BCF    03.5
07F8:  CALL   017
07F9:  BSF    03.5
....................     }  
.................... //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//  
.................... }  
07FA:  BCF    03.5
07FB:  BSF    0A.3
07FC:  BCF    0A.4
07FD:  GOTO   2D5 (RETURN)
.................... /////////////////////////////////////////// FUNCIONES //////////////////////////////////////////  
.................... void fnLimpCad(){  
....................   int j=0;  
*
003B:  CLRF   41
....................   
....................   for(j=0;j<16;j++)  
003C:  CLRF   41
003D:  MOVF   41,W
003E:  SUBLW  0F
003F:  BTFSS  03.0
0040:  GOTO   048
....................     cadena[j]=' ';  
0041:  MOVLW  2F
0042:  ADDWF  41,W
0043:  MOVWF  04
0044:  MOVLW  20
0045:  MOVWF  00
0046:  INCF   41,F
0047:  GOTO   03D
....................   
....................   i=0;  
0048:  CLRF   21
.................... }  
0049:  BSF    0A.3
004A:  BCF    0A.4
004B:  GOTO   2B6 (RETURN)
....................   
.................... void fncEscribe(char car){  
....................   bit_set(PORTE,E);    // E=1  
*
0017:  BSF    09.0
....................   output_b(car);       // PORTB = car  
0018:  MOVLW  00
0019:  BSF    03.5
001A:  MOVWF  06
001B:  MOVF   6D,W
001C:  BCF    03.5
001D:  MOVWF  06
....................   bit_clear(PORTE,E);  // E=0  
001E:  BCF    09.0
....................   delay_us(50);  
001F:  MOVLW  53
0020:  MOVWF  77
0021:  DECFSZ 77,F
0022:  GOTO   021
.................... }  
0023:  RETLW  00
....................   
.................... void fncRecibeC(char car){  
....................   
....................   if(car != '\n'){  
0024:  MOVF   41,W
0025:  SUBLW  0A
0026:  BTFSC  03.2
0027:  GOTO   034
....................     cadena[i]=car;  
0028:  MOVLW  2F
0029:  ADDWF  21,W
002A:  MOVWF  04
002B:  MOVF   41,W
002C:  MOVWF  00
....................     i++;  
002D:  INCF   21,F
....................     fncEscribe(car);  
002E:  MOVF   41,W
002F:  BSF    03.5
0030:  MOVWF  6D
0031:  BCF    03.5
0032:  CALL   017
....................   }  
....................   
....................   else{  
0033:  GOTO   03A
....................     i++;  
0034:  INCF   21,F
....................     cadena[i]='\0';  
0035:  MOVLW  2F
0036:  ADDWF  21,W
0037:  MOVWF  04
0038:  CLRF   00
....................     i=0;  
0039:  CLRF   21
....................   }  
.................... }  
003A:  RETLW  00
....................   
.................... void fncClear(){  
....................   //Modo comando  
....................   bit_clear(PORTE,RS);  
*
004C:  BCF    09.2
....................   bit_clear(PORTE,RW);  
004D:  BCF    09.1
....................   bit_set(PORTE,E);    // E=1  
004E:  BSF    09.0
....................   output_b(0x01);      // PORTB = car  
004F:  MOVLW  00
0050:  BSF    03.5
0051:  MOVWF  06
0052:  MOVLW  01
0053:  BCF    03.5
0054:  MOVWF  06
....................   bit_clear(PORTE,E);  // E=0  
0055:  BCF    09.0
....................   
....................   //Pasar a modo dato  
....................   bit_set(PORTE,RS);   // RS=1  
0056:  BSF    09.2
....................   bit_clear(PORTE,RW); // RW=0  
0057:  BCF    09.1
.................... }  
0058:  RETLW  00
....................   
.................... void fncCadena(char caracter[])  
.................... {  
....................   int x=0;  
*
0786:  CLRF   6B
....................       
....................   for(x=0;x<=50;x++){  
0787:  CLRF   6B
0788:  MOVF   6B,W
0789:  SUBLW  32
078A:  BTFSS  03.0
078B:  GOTO   7A2
....................      if (caracter[x] != '\0')  
....................         fncEscribe(caracter[x]);  
078C:  MOVF   6A,W
078D:  ADDWF  6B,W
078E:  MOVWF  04
078F:  MOVF   00,F
0790:  BTFSC  03.2
0791:  GOTO   79C
0792:  MOVF   6A,W
0793:  ADDWF  6B,W
0794:  MOVWF  04
0795:  MOVF   00,W
0796:  MOVWF  6C
0797:  MOVWF  6D
0798:  BCF    03.5
0799:  CALL   017
....................   
....................      else  
....................         x=50;    
079A:  GOTO   79F
079B:  BSF    03.5
079C:  MOVLW  32
079D:  MOVWF  6B
079E:  BCF    03.5
....................   }     
079F:  BSF    03.5
07A0:  INCF   6B,F
07A1:  GOTO   788
.................... }  
....................   
.................... void RecorDispDer(){  
....................   //Modo comando  
....................   bit_clear(PORTE,RS);  
*
0800:  BCF    09.2
....................   bit_clear(PORTE,RW);  
0801:  BCF    09.1
....................   
....................   bit_set(PORTE,E);    // E=1  
0802:  BSF    09.0
....................   output_b(0x18);      // cambia direccion de cursor <--  
0803:  MOVLW  00
0804:  BSF    03.5
0805:  MOVWF  06
0806:  MOVLW  18
0807:  BCF    03.5
0808:  MOVWF  06
....................   bit_clear(PORTE,E);  // E=0  
0809:  BCF    09.0
....................   delay_us(50);  
080A:  MOVLW  53
080B:  MOVWF  77
080C:  DECFSZ 77,F
080D:  GOTO   00C
....................   
....................   bit_set(PORTE,RS);   // RS=1  
080E:  BSF    09.2
....................   bit_clear(PORTE,RW); // RW=0  
080F:  BCF    09.1
.................... }  
0810:  BSF    0A.3
0811:  BCF    0A.4
0812:  GOTO   2E5 (RETURN)
....................  

Configuration Fuses:
   Word  1: 3FFE   HS WDT NOPUT NOPROTECT BROWNOUT LVP NOCPD NOWRT NODEBUG
